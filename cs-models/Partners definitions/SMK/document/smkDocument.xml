<?xml version="1.0"?>
<definition id="smkDocument" type="document" parentId="baseDocument" isAbstract="true">
	<fields>
		<field name="default_header" type="ANY" label="DOCUMENT_DEFAULT_HEADER_SMK" />
		<field name="compact_header" type="ANY" label="DOCUMENT_COMPACT_HEADER_SMK"/>
		<field name="breadcrumb_header" type="ANY" label="DOCUMENT_BREADCRUMB_HEADER_SMK" />
		<field name="tooltip_header" type="ANY" label="DOCUMENT_TOOLTIP_HEADER_SMK" />

		<!-- all properties from the generic definition will be organized in regions -->
		<field name="outcome" displayType="system" />
		<field name="completedOn" displayType="system" />
		<field name="uri" displayType="system" />
		<field name="lastRevision" displayType="system" />
	</fields>

	<regions>	
		<region id="generalData" displayType="editable" order="10" label="smk.generalData.region.label">
			<fields>
				<field name="hasAssignedConservator" type="uri" displayType="editable" order="120" label="smk.hasAssignedConservator.label" tooltip="smk.hasAssignedConservator.tooltip" multiValued="true" previewEmpty="false" uri="chc:hasAssignedConservator" >
					<control id="PICKER">
						<control-param id="range" name="range">emf:User</control-param>
						<control-param id="restrictions" name="restrictions">{"field": "emf:status", "operator": "in", "type": "codeList", "value": ["ACTIVE"]}</control-param>
					</control>
					<value>${currentUser.id}</value>
				</field>
				<field name="reportDate" type="date" displayType="editable" order="125" label="smk.reportDate.label" tooltip="smk.reportDate.tooltip" previewEmpty="false" uri="chc:reportDate" />
				<field name="documents" type="uri" displayType="editable" order="135" label="smk.document.label" previewEmpty="false" uri="chc:documents" >
					<control id="PICKER">
						<control-param id="range" name="range">chc:CulturalObject</control-param>
					</control>
				</field>
				<field name="documentedCulturalObjectType" type="ANY" codelist="CL7" displayType="editable" order="140" uri="smk:documentedCulturalObjectType" >
					<control id="RELATED_FIELDS">
						<control-param type="related_field" id="fieldsToRerender" name="RERENDER">documentedCulturalObjectType</control-param>
						<control-param type="related_field" id="filterSource" name="FILTER_SOURCE">SMKCO7001,SMKCO7002,SMKCO7003,SMKCO7004,SMKCO7005,SMKCO7006,SMKCO7007,SMKCO7008,SMKCO7009,SMKCO7010,SMKCO7011,SMKCO7012</control-param>
						<control-param type="related_field" id="filterInclusive" name="INCLUSIVE">true</control-param>
						<control-param type="default_value_pattern" id="template" name="template">$[chc:documents.type]</control-param>
					</control>
				</field>
				<field name="title" type="an..1000" order="145" tooltip="smk.title.tooltip" >
					 <control id="DEFAULT_VALUE_PATTERN">
						<control-param type="default_value_pattern" id="template" name="template">$[chc:documents.objectId]/$[emf:createdOn]/$[emf:type]</control-param>
					</control>
				</field>
				<field name="description" order="150" tooltip="smk.description.tooltip" previewEmpty="false" />
				<field name="ocrLanguage" type="ANY" codelist="CL25" mandatory="true" displayType="editable" uri="emf:ocrLanguage" override="true">
					<condition id="readOnlyFields" renderAs="READONLY">[status] IN ('DRAFT','PENDING_APPROVAL')</condition>
					<condition id="optionalFields" renderAs="OPTIONAL">[status] IN ('DRAFT','PENDING_APPROVAL')</condition>
					<value>dan</value>
				</field>
			</fields>
		</region>
		<region id="systemData" displayType="editable" order="20" label="smk.systemData.region.label">
			<fields>
				<field name="type" tooltip="smk.type.tooltip" >
					<value>smkDocument</value>
				</field>				
				<field name="identifier" tooltip="smk.identifier.tooltip" rnc="${eval(DC${seq({+dcSequence})})}" />
				<field name="name" tooltip="smk.name.tooltip" />
				<field name="mimetype" />
				<field name="size" label="smk.size.label" tooltip="smk.size.tooltip" />
				<field name="status" tooltip="smk.status.tooltip" />
				<field name="emf:version" tooltip="smk.version.tooltip" />
				<field name="integrated" type="boolean" displayType="hidden" uri="emf:integrated"/>
				<!-- object properties (relationships) -->
				<field name="createdOn" tooltip="smk.createdOn.tooltip" />
				<field name="createdBy" tooltip="smk.createdBy.tooltip" />
				<field name="modifiedOn" label="smk.modifiedOn.label" tooltip="smk.modifiedOn.tooltip" />
				<field name="modifiedBy" label="smk.modifiedBy.label" tooltip="smk.modifiedBy.tooltip" />
				<field name="lockedBy" tooltip="smk.lockedBy.tooltip" />
				<field name="processedBy" type="uri" tooltip="smk.processedBy.tooltip" displayType="readOnly" multiValued="true" previewEmpty="false" uri="emf:processedBy" >
					<control id="PICKER">
						<control-param id="range" name="range">emf:BusinessProcess,emf:Task</control-param>
					</control>
				</field>
				<field name="hasThumbnail" label="smk.hasThumbnail.label" tooltip="smk.hasThumbnail.tooltip" />
				<field name="hasAttachment" type="uri" displayType="editable" label="smk.hasAttachment.label" multiValued="true" previewEmpty="false" uri="chc:hasAttachment" >
					<control id="PICKER">
						<control-param id="range" name="range">emf:Document,emf:Image,emf:Audio,emf:Video,chc:CulturalObject,chc:Sample,emf:Task,emf:Project,emf:Case,chc:Exhibition,emf:BusinessProcess</control-param>
					</control>
				</field>
				<field name="attachmentOf" type="uri" displayType="editable" label="smk.attachmentOf.label" multiValued="true" previewEmpty="false" uri="chc:attachmentOf" >
					<control id="PICKER">
						<control-param id="range" name="range">emf:Document,emf:Image,emf:Audio,emf:Video,chc:CulturalObject,chc:Sample,emf:Task,emf:Project,emf:Case,chc:Exhibition,emf:BusinessProcess</control-param>
					</control>
				</field>
				<field name="hasWatcher" label="smk.hasWatcher.label" tooltip="smk.hasWatcher.tooltip" previewEmpty="false" />
				<field name="parentOf" tooltip="smk.parentOf.tooltip" previewEmpty="false" />
				<field name="hasParent" tooltip="smk.hasParent.tooltip" />
				<field name="emf:hasTemplate" label="smk.hasTemplate.label" tooltip="smk.hasTemplate.tooltip" />
				<field name="partOf" displayType="readonly" tooltip="smk.partOf.tooltip" />
				<field name="hasChild" tooltip="smk.hasChild.tooltip" previewEmpty="false" />
			</fields>
		</region>
		<region id="smkDocRevisions" order="30" displayType="editable" label="smk.revisions.region.label">
			<fields>
				<field name="hasRevision" label="smk.hasRevision.label" tooltip="smk.hasRevision.tooltip" />
				<field name="isRevisionOf" label="smk.isRevisionOf.label" tooltip="smk.isRevisionOf.tooltip" />
				<field name="lastPublishedRevision" tooltip="smk.lastPublishedRevision.tooltip" />
				<field name="nextRevision" tooltip="smk.nextRevision.tooltip" />
				<field name="previousRevision" tooltip="smk.previousRevision.tooltip" />
			</fields>
		</region>	
	</regions>

	<transitions>	
		<transition id="editDetails" order="10" />
		<transition id="uploadNewVersion" order="20" actionPath="/" />

		<group id="add" order="25" label="add.group.label" type="menu" />
		<transition id="addAttachment" label="smk.addAttachment.action.label"  tooltip="smk.addAttachment.action.tooltip" purpose="addRelation" group="add">
			<fields>
				<field name="addAttachmentConfig" type="json">
					<value>
							{
								"predefinedTypes" : ["emf:Project","emf:Case","emf:Document","emf:Task","chc:CulturalObject","emf:Image","emf:Audio","emf:Video","chc:Sample","chc:Exhibition","emf:BusinessProcess"],
								"selection" : "multiple",
								"relation" : ["chc:hasAttachment"]
							}
					</value>
					<control id="configuration" />
				</field>
			</fields>
		</transition>
		<transition id="addThumbnail" group="add" />
		<transition id="addWatchers" label="addWatchers.label" tooltip="addWatchers.tooltip" purpose="addRelation" group="add" >
			<fields>
				<field name="addWatcherConfig" type="json">
					<value>						
							{
								"predefinedTypes" : ["emf:User"],
								"selection" : "multiple",
								"relation" : ["emf:hasWatcher"],
								"restrictions" : {"field": "emf:status", "operator": "in", "type": "codeList", "value": ["ACTIVE"]}
							}
					</value>
					<control id="configuration" />
				</field>
			</fields>
		</transition>
		
		<group id="createRevision" order="20" label="createRevision.group.label" type="menu" />
		<transition id="uploadRevision" group="createRevision" />
		<transition id="publish" tooltip="smk.publish.action.tooltip" confirmation="publish.confirm" group="createRevision" >
			<fields>
				<field name="sendMail" type="an..200" displayType="system" >
					<value>
						<![CDATA[	
							var type = codelist.getDescription(6, root.get('type'), 'da');
							var title = root.get('title');
							var subject = '(Publiceret) ' + type +': ' + title;
							//extract warchers and crearedBy users
							var watchers = root.get('hasWatcher');
							var createdBy = root.get('createdBy');
							var recipients = [];
							var i = 0;
							if (watchers != null){
								for(i = 0; i < watchers.length; i++) {
									recipients.push(watchers[i].toString());
								}
							}
							recipients.push(createdBy.toString());
							
							var targetID = root.get('lastPublishedRevision');
							context.put('archivedInstance', instance.load(targetID));
							
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_publish_object_smk", recipients, context);
						]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>
		<transition id="publishAsPdf" tooltip="smk.publishAsPdf.action.tooltip" confirmation="publishAsPdf.confirm" group="createRevision" >
			<fields>
				<field name="sendMail" type="an..200" displayType="system" >
					<value>
						<![CDATA[	
							var type = codelist.getDescription(6, root.get('type'), 'da');
							var title = root.get('title');
							var subject = '(Publiceret) ' + type +': ' + title;
							//extract warchers and crearedBy users
							var watchers = root.get('hasWatcher');
							var createdBy = root.get('createdBy');
							var recipients = [];
							var i = 0;
							if (watchers != null){
								for(i = 0; i < watchers.length; i++) {
									recipients.push(watchers[i].toString());
								}
							}
							recipients.push(createdBy.toString());
							
							var targetID = root.get('lastPublishedRevision');
							context.put('archivedInstance', instance.load(targetID));
							
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_publish_object_smk", recipients, context);
						]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>
		
		<transition id="createWorkflow" order="40" label="smk.createWorkflow.action.label" tooltip="smk.createWorkflow.action.tooltip" purpose="createInstance">
      		<fields>
				<field name="createWorkflowConfig" type="json">
					<value>
						{ 
							"predefinedTypes" : ["emf:BusinessProcess"],
							"predefinedSubTypes" : ["SMKWFLTYPE01","SMKWFLTYPE05"],
							"contextSelectorDisabled": true
						}
  			 	  </value>
 		      	  <control id="configuration" />
 		   		</field>
 		   </fields>
		</transition>
		<transition id="editOffline" order="43" />
		<transition id="download" order="45" actionPath="/" />
		
		<group id="exportAs" order="50" label="exportAs.group.label" type="menu" />
		<transition id="exportTabPDF" group="exportAs" />
		<transition id="exportPDF" group="exportAs" />
		<transition id="exportTabWord" group="exportAs" />
		<transition id="exportWord" group="exportAs" />
		
		<group id="print" order="55" label="print.group.label" type="menu" />
		<transition id="printTab" group="print" />
		<transition id="print" group="print" />
		
		<group id="template" order="60" label="template.group.label" type="menu" />
		<transition id="saveAsTemplate" group="template" />		
		<transition id="updateTemplate" label="updateTemplate.label" tooltip="smk.updateTemplate.action.tooltip" purpose="updateTemplate" confirmation="confirmation.update_template" group="template" />
		<transition id="changeTemplate" label="changeTemplate.label" tooltip="smk.changeTemplate.action.tooltip" purpose="changeTemplate" group="template" />
			
		<group id="more" order="65" label="more.group.label" type="menu" />
		<transition id="changeType" group="more" >
			<fields>
				<field name="onChangeType" type="an..200" displayType="system" >
					<value>
						<![CDATA[
							var title = root.get('title');
							var subject = '(Ændret type) Dokument: ' + title;
							
							//extract watchers
							var recipients = [];
							var watchers = root.get('hasWatcher');
							if(watchers != null){
								for(var i = 0; i < watchers.length; i++){
								recipients.push(watchers[i].toString());
								}
							}
							//extract createdBy
							recipients.push(root.get('createdBy').toString());
							
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_change_object_type_smk", recipients, context, null);
						]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>
		<transition id="move" confirmation="move.confirm" group="more" >
			<fields>
				<field name="sendMail" type="an..200" displayType="system" >
                    <value>
						<![CDATA[
							var type = codelist.getDescription(6, root.get('type'), 'da');
							var title = root.get('title');
							var subject = '(Flyttet) ' + type +': ' + title;

							//extract watchers and crator
							var watchers = root.get('hasWatcher');
							var createdBy = root.get('createdBy');

							//add all users to recipients
							var recipients = [];
							var i = 0;
							if (watchers != null) {
							 for(i = 0; i < watchers.length; i++) {
								recipients.push(watchers[i].toString());							   }
							}
							recipients.push(createdBy.toString());
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_move_object_smk", recipients, context);
						]]>
                    </value>
                    <control id="SCRIPT">
                        <control-param id="phase" name="phase">after</control-param>
                        <control-param id="async" name="async">true</control-param>
                    </control>
                </field>
			</fields>
		</transition>
		<transition id="clone" confirmation="clone.confirm" group="more" />
		<transition id="lock" group="more" />
		<transition id="unlock" group="more" />
		<transition id="managePermissions" group="more" />
		
		<transition id="delete" order="100" tooltip="smk.delete.tooltip" >
			<fields>
				<field name="sendMail" type="an..200" displayType="system" >
                    <value>
						<![CDATA[
							var type = codelist.getDescription(6, root.get('type'), 'da');
							var title = root.get('title');
							var subject = '(Slettet) ' + type +': ' + title;

							//extract watchers 
							var watchers = root.get('hasWatcher');
							var createdBy = root.get('createdBy');

							//add all users to recipients
							var recipients = [];
							var i = 0;
							if (watchers != null) {
							 for(i = 0; i < watchers.length; i++) {
							  	recipients.push(watchers[i].toString());
							   }
							}
							recipients.push(createdBy.toString());
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_delete_object_smk", recipients, context);
						]]>
                    </value>
                    <control id="SCRIPT">
                        <control-param id="phase" name="phase">after</control-param>
                        <control-param id="async" name="async">false</control-param>
                    </control>
                </field>
			</fields>
		</transition>
		<transition id="revertVersion" order="110" tooltip="smk.revertVersion.action.tooltip" />
	</transitions>

	<stateTransitions>
		<stateTransition from="INIT" transition="create" to="NOT_CREATED"/>
		<stateTransition from="NOT_CREATED" transition="create" to="DRAFT"/>
		<stateTransition from="INIT" transition="clone" to="DRAFT"/>
		
		<stateTransition from="INIT" transition="changeType" to="DRAFT"/>

		<stateTransition from="DRAFT" transition="saveAsTemplate" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="changeTemplate" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="updateTemplate" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="changeType" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="move" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="editOffline" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="download" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="editDetails" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="uploadNewVersion" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="lock" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="unlock" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="revertVersion" to="DRAFT" />
		<stateTransition from="DRAFT" transition="managePermissions" to="DRAFT" />
		<stateTransition from="DRAFT" transition="addAttachment" to="DRAFT" />
		<stateTransition from="DRAFT" transition="addWatchers" to="DRAFT" />
		<stateTransition from="DRAFT" transition="print" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="printTab" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="exportPDF" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="exportTabPDF" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="exportWord" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="exportTabWord" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="clone" to="DRAFT" />
		<stateTransition from="DRAFT" transition="addThumbnail" to="DRAFT" />
		<stateTransition from="DRAFT" transition="createWorkflow" to="DRAFT" />
		<stateTransition from="DRAFT" transition="createInContext" to="DRAFT"/>	
		<stateTransition from="DRAFT" transition="delete" to="DRAFT"/>
		
		<stateTransition from="DRAFT" transition="publish" to="APPROVED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="DRAFT" transition="publish" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="publishAsPdf" to="APPROVED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="DRAFT" transition="publishAsPdf" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="uploadRevision" to="APPROVED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="DRAFT" transition="uploadRevision" to="DRAFT" />
		
		<!-- PENDING_APPROVAL is available only for documents processed by workflow -->
		<stateTransition from="PENDING_APPROVAL" transition="saveAsTemplate" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="editDetails" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="uploadNewVersion" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="lock" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="unlock" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="revertVersion" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="managePermissions" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="addAttachment" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="addWatchers" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="printTab" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="print" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="exportTabPDF" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="exportPDF" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="exportTabWord" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="exportWord" to="PENDING_APPROVAL" /> 
		<stateTransition from="PENDING_APPROVAL" transition="editOffline" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="download" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="clone" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="addThumbnail" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="createInContext" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="publish" to="APPROVED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="PENDING_APPROVAL" transition="publish" to="DRAFT"/>			
		<stateTransition from="PENDING_APPROVAL" transition="publishPdf" to="APPROVED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>			
		<stateTransition from="PENDING_APPROVAL" transition="publishPdf" to="DRAFT"/>	
		
		<stateTransition from="APPROVED" transition="printTab" to="APPROVED" />
		<stateTransition from="APPROVED" transition="print" to="APPROVED"/>
		<stateTransition from="APPROVED" transition="exportTabPDF" to="APPROVED" />
		<stateTransition from="APPROVED" transition="exportPDF" to="APPROVED"/>
		<stateTransition from="APPROVED" transition="exportTabWord" to="APPROVED" />
		<stateTransition from="APPROVED" transition="exportWord" to="APPROVED"/>
		<stateTransition from="APPROVED" transition="download" to="APPROVED"/>
		<stateTransition from="APPROVED" transition="clone" to="APPROVED"/>
		<stateTransition from="APPROVED" transition="managePermissions" to="APPROVED" />		
		<stateTransition from="APPROVED" transition="createInContext" to="APPROVED"/>
		<stateTransition from="APPROVED" transition="publish" to="APPROVED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="APPROVED" transition="publish" to="DRAFT" />
		<stateTransition from="APPROVED" transition="publishAsPdf" to="APPROVED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="APPROVED" transition="publishAsPdf" to="DRAFT" />

		<!-- REJECTED is available only for documents processed by workflow -->
		<stateTransition from="REJECTED" transition="clone" to="REJECTED" />
		<stateTransition from="REJECTED" transition="printTab" to="REJECTED" />
		<stateTransition from="REJECTED" transition="print" to="REJECTED" />
		<stateTransition from="REJECTED" transition="exportTabPDF" to="REJECTED" />
		<stateTransition from="REJECTED" transition="exportPDF" to="REJECTED" />
		<stateTransition from="REJECTED" transition="exportTabWord" to="REJECTED" />
		<stateTransition from="REJECTED" transition="exportWord" to="REJECTED" /> 
		<stateTransition from="REJECTED" transition="download" to="REJECTED"/>
		<stateTransition from="REJECTED" transition="managePermissions" to="REJECTED" />
		<stateTransition from="REJECTED" transition="createInContext" to="REJECTED"/>

		<stateTransition from="OBSOLETE" transition="printTab" to="OBSOLETE" />
		<stateTransition from="OBSOLETE" transition="print" to="OBSOLETE" />
		<stateTransition from="OBSOLETE" transition="exportTabPDF" to="OBSOLETE" />
		<stateTransition from="OBSOLETE" transition="exportPDF" to="OBSOLETE" />
		<stateTransition from="OBSOLETE" transition="exportTabWord" to="OBSOLETE" /> 
		<stateTransition from="OBSOLETE" transition="exportWord" to="OBSOLETE" /> 
		<stateTransition from="OBSOLETE" transition="download" to="OBSOLETE"/>
		<stateTransition from="OBSOLETE" transition="managePermissions" to="OBSOLETE" />
		<stateTransition from="OBSOLETE" transition="createInContext" to="OBSOLETE"/>

		<stateTransition from="*" transition="obsolete" to="OBSOLETE" />
	</stateTransitions>

	<allowedChildren>
		<child type="document" id="all"/>
		<child type="object" id="SMKSAMPLE"/>
		<child type="object" id="smkAudio"/>
		<child type="object" id="smkVideo"/>
		<child type="object" id="smkImage"/>
		<child type="task" id="all"/>
		<child type="workflow" id="SMKWFLTYPE01"/>
		<child type="workflow" id="SMKWFLTYPE05"/>
	</allowedChildren>
	
	<labels>
		<label id="DOCUMENT_TOOLTIP_HEADER_SMK">
			<value lang="en"><![CDATA[${eval(#{eval(
				<span class="thumbnail-content">
					<img class="thumbnail" src="${thumbnailUri(64)}" />
				</span>
				<span class="tooltip-data">
					<span class="tooltip-header">
						<a href="${link(currentInstance)}" class="instance-link" data-status="${get([status])}" data-id="${id.db}" data-uid="${id.uid}">
							<span data-title="${get([title])}">${get([title])}</span>
						</a>
					</span>
					<span class="tooltip-row">
						<label>Type: </label>
						<span data-property="type">${CL([type])}</span>
					</span>
					<span class="tooltip-row">
						<label>Version: </label>
						<span data-property="emf:version">${get([emf:version])}</span>
					</span>
					<span class="tooltip-row">
						<label>System modified by: </label>
						<span data-property="modifiedBy">${user(${get([modifiedBy])})}</span>
					</span>
					<span class="tooltip-row">
						<label>System modified on: </label>
						<span data-property="modifiedOn">${date([modifiedOn])}</span>
					</span>
					${if(${get([lockedBy])} <> null).then(
						<span class="tooltip-row">
							<label>${label(lockedBy)}:</label>
							<span data-property="lockedBy">${objectProperty(${get([lockedBy])})}</span>                      
						</span>
					)}	
			</span>)})}]]></value>
			<value lang="da"><![CDATA[${eval(#{eval(
				<span class="thumbnail-content">
					<img class="thumbnail" src="${thumbnailUri(64)}" />
				</span>
				<span class="tooltip-data">
					<span class="tooltip-header">
						<a href="${link(currentInstance)}" class="instance-link" data-status="${get([status])}" data-id="${id.db}" data-uid="${id.uid}">
							<span data-title="${get([title])}">${get([title])}</span>
						</a>
					</span>
					<span class="tooltip-row">
						<label>Type: </label>
						<span data-property="type">${CL([type])}</span>
					</span>
					<span class="tooltip-row">
						<label>Version: </label>
						<span data-property="emf:version">${get([emf:version])}</span>
					</span>
					<span class="tooltip-row">
						<label>Opdateret af: </label>
						<span data-property="modifiedBy">${user(${get([modifiedBy])})}</span>
					</span>
					<span class="tooltip-row">
						<label>Opdateret: </label>
						<span data-property="modifiedOn">${date([modifiedOn])}</span>
					</span>
					${if(${get([lockedBy])} <> null).then(
						<span class="tooltip-row">
							<label>${label(lockedBy)}:</label>
							<span data-property="lockedBy">${objectProperty(${get([lockedBy])})}</span>                      
						</span>
					)}	
			</span>)})}]]></value>
		</label>
		<label id="DOCUMENT_DEFAULT_HEADER_SMK">
			<value lang="en"><![CDATA[${eval(
				${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")}}
				${var.contentSize=${if(${get([size], 0)} <> 0).then(${get([size])}).else(${get([fileSize])})}}
				${var.isVersion= ${if(${get([isVersion])} == true).then(true).else(false)}}
				${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
				${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
				<span><img src="${thumbnailUri(64)}"/></span>
				<span>
					${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
					<b>
						<a ${var.href} class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}">
							${if(${get([emf:isDeleted])} == true).then(<span>(Deleted)</span>&nbsp;)}
							${if(${or(${var.isLatest} or ${var.isRevision})}).then(
								<span>(</span>Published revision:<span data-property="revisionNumber">${get([emf:revisionNumber])}</span>)&nbsp;
							)}
							<span data-property="title">${get([title])}</span>
						</a>
					</b>	
					${if(${get([size])}==null).then(&nbsp;(<span data-property="status">${CL([status])}</span>))}
					<br />
					<span data-property="type">${CL([type])}</span>,&nbsp;
					Last modified by: <span data-property="modifiedBy">${objectProperty(${get([modifiedBy])})}</span>, ${date([modifiedOn])}
					${if(${get([mimetype])}<>null).then(;&nbsp;Mimetype:&nbsp;<span data-property="mimetype">${CL([mimetype])}</span>)}
					${if(${get([size])}<>null).then(,&nbsp;Size:&nbsp;<span data-property="size">${getReadableFormat(${var.contentSize})}</span>)}
					${if(${var.isVersion}).then(
						&nbsp;<span data-property="emf:version" class="object-version version badge">${get([emf:version])}</span>
					)}
					${if(${get([isRevisionOf])}<>null).then(<br />Revision of:<span data-property="isRevisionOf">${objectProperty(${get([isRevisionOf])})}</span>)}
				</span>
			)}]]></value>
			<value lang="da"><![CDATA[${eval(
				${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")}}
				${var.contentSize=${if(${get([size], 0)} <> 0).then(${get([size])}).else(${get([fileSize])})}}
				${var.isVersion= ${if(${get([isVersion])} == true).then(true).else(false)}}
				${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
				${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
				<span><img src="${thumbnailUri(64)}"/></span>
				<span>
					${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
					<b>
						<a ${var.href} class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}">
							${if(${get([emf:isDeleted])} == true).then(<span>(Slettet)</span>&nbsp;)}
							${if(${or(${var.isLatest} or ${var.isRevision})}).then(
								<span>(</span>Publicerede revision:<span data-property="revisionNumber">${get([emf:revisionNumber])}</span>)&nbsp;
							)}
							<span data-property="title">${get([title])}</span>
						</a>
					</b>	
					${if(${get([size])}==null).then(&nbsp;(<span data-property="status">${CL([status])}</span>))}
					<br />
					<span data-property="type">${CL([type])}</span>,&nbsp;
					Senest redigeret af: <span data-property="modifiedBy">${objectProperty(${get([modifiedBy])})}</span>, ${date([modifiedOn])}
					${if(${get([mimetype])}<>null).then(;&nbsp;MIME-type:&nbsp;<span data-property="mimetype">${CL([mimetype])}</span>)}
					${if(${get([size])}<>null).then(,&nbsp;Forlimning:&nbsp;<span data-property="size">${getReadableFormat(${var.contentSize})}</span>)}
					${if(${var.isVersion}).then(
						&nbsp;<span data-property="emf:version" class="object-version version badge">${get([emf:version])}</span>
					)}
					${if(${get([isRevisionOf])}<>null).then(<br />Revision af:<span data-property="isRevisionOf">${objectProperty(${get([isRevisionOf])})}</span>)}
				</span>
			)}]]></value>
		</label>			
		<label id="DOCUMENT_COMPACT_HEADER_SMK">
			<value lang="en"><![CDATA[${eval(
				${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")}}
				${var.isVersion= ${if(${get([isVersion])} == true).then(true).else(false)}}
				${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
				${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
				<span><img src="${thumbnailUri(16)}"/></span>
				<span class="truncate-element">
					${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
					<a class="${get([status])} instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href} uid="${id.uid}" style="vertical-align:baseline;">
						${if(${get([emf:isDeleted])} == true).then(<span>(Deleted)</span>&nbsp;)}
						${if(${or(${var.isLatest} or ${var.isRevision})}).then(
							<span>(</span>Published revision:<span data-property="revisionNumber">${get([emf:revisionNumber])}</span>)&nbsp;
						)}
						<span data-property="title">${get([title])}</span>
					</a>
					${if(${get([size])}==null).then(&nbsp;(<span data-property="status">${CL([status])}</span>))}
					${if(${var.isVersion}).then(
						&nbsp;<span data-property="emf:version" class="object-version version badge">${get([emf:version])}</span>
					)}
				</span>
			)}]]></value>
			<value lang="da">
				<![CDATA[${eval(
				${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")}}
				${var.isVersion= ${if(${get([isVersion])} == true).then(true).else(false)}}
				${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
				${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
				<span><img src="${thumbnailUri(16)}"/></span>
				<span class="truncate-element">
					${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
					<a class="${get([status])} instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href} uid="${id.uid}" style="vertical-align:baseline;">
						${if(${get([emf:isDeleted])} == true).then(<span>(Slettet)</span>&nbsp;)}
						${if(${or(${var.isLatest} or ${var.isRevision})}).then(
							<span>(</span>Publicerede revision:<span data-property="revisionNumber">${get([emf:revisionNumber])}</span>)&nbsp;
						)}
						<span data-property="title">${get([title])}</span>
					</a>
					${if(${get([size])}==null).then(&nbsp;(<span data-property="status">${CL([status])}</span>))}
					${if(${var.isVersion}).then(
						&nbsp;<span data-property="emf:version" class="object-version version badge">${get([emf:version])}</span>
					)}
				</span>
			)}]]></value>
		</label>		
		<label id="DOCUMENT_BREADCRUMB_HEADER_SMK">
			<value lang="en"><![CDATA[${eval(
				${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")}}
				${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
				${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
				<span><img src="${thumbnailUri(16)}"/></span>
				<span>
					${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
					<a class="${get([status])} instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href} uid="${id.uid}">
						${if(${get([emf:isDeleted])} == true).then(<span>(Deleted)</span>&nbsp;)}
						${if(${or(${var.isLatest} or ${var.isRevision})}).then(<span>(</span>Published revision:&nbsp;<span data-property="revisionNumber">${get([emf:revisionNumber])}</span>)&nbsp;
						
						)}
						<span data-property="title">${get([title])}</span>
					</a>
				</span>		
            )}]]></value>
			<value lang="da"><![CDATA[${eval(
				${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")}}
				${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
				${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
				<span><img src="${thumbnailUri(16)}"/></span>
				<span>
					${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
					<a class="${get([status])} instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href} uid="${id.uid}">
						${if(${get([emf:isDeleted])} == true).then(<span>(Slettet)</span>&nbsp;)}
						${if(${or(${var.isLatest} or ${var.isRevision})}).then(<span>(</span>Publiceret revision:&nbsp;<span data-property="revisionNumber">${get([emf:revisionNumber])}</span>)&nbsp;
						
						)}
						<span data-property="title">${get([title])}</span>
					</a>
				</span>		
            )}]]></value>
		</label>		
	</labels>
</definition>
