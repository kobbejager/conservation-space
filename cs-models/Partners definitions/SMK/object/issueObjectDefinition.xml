<?xml version="1.0" encoding="UTF-8"?>
<definition id="csIssue" parentId="baseIssue" isAbstract="false" type="object">
	<configuration>
		<fields>
			<field name="existingInContext">
				<value>WITHOUT_CONTEXT</value>
			</field>
		</fields>
	</configuration>
	<fields>
		<!-- HEADERS AND TOOLTIP -->
		<field name="default_header" type="ANY" label="CS_ISSUE_DEFAULT_HEADER" displayType="system" />
		<field name="compact_header" type="ANY" label="CS_ISSUET_COMPACT_HEADER" displayType="system" />
		<field name="breadcrumb_header" type="ANY" label="CS_ISSUE_BREADCRUMB_HEADER" displayType="system" />
		<field name="tooltip_header" type="ANY" label="CS_ISSUE_TOOLTIP_HEADER" displayType="system" />

		<field name="partOf" displayType="system" />
		<field name="hasChild" displayType="system" />
	</fields>
	
	<regions>
		<region id="specificInformation" order="1" displayType="editable" label="smk.specificInformation.region.label">
			<fields>
				<field name="issueType" tooltip="csIssue.issueType.tooltip" />
				<field name="title" type="an..1000" tooltip="smk.title.tooltip" />
				<field name="description" type="an..1500" displayType="editable" tooltip="smk.description.tooltip" />
				<field name="priority" tooltip="csIssue.priority.tooltip" >
					<value>MAJOR</value>
				</field>
				<field name="hasReporter" label="csIssue.hasReporter.label" tooltip="csIssue.hasReporter.tooltip" />
				<field name="assignee" label="smk.assignee.label" tooltip="csIssue.assignee.tooltip" >
					<control id="PICKER">
						<control-param id="range" name="range">emf:User</control-param>
						<control-param id="restrictions" name="restrictions">{"field": "emf:status", "operator": "in", "type": "codeList", "value": ["ACTIVE"]}</control-param>
					</control>
				</field>
				<field name="dueDate" label="csIssue.dueDate.label" tooltip="csIssue.dueDate.tooltip" />
				<field name="status" tooltip="smk.status.tooltip" />
				<field name="resolution" tooltip="csIssue.resolution.tooltip" >
					<condition id="hiddenFieldStatus" renderAs="HIDDEN">[status] IN ('INIT','OPEN','CLARIFY','ON_HOLD')</condition>
					<condition id="readonlyFields" renderAs="READONLY">[status] IN ('RESOLVED','COMPLETED')</condition>
				 </field> 
				<field name="isDuplicatedBy" tooltip="csIssue.isDuplicatedBy.tooltip" >
					<condition id="mandatoryField" renderAs="MANDATORY">[resolution] IN ('RT21003')</condition>
				</field>
			</fields>
		</region>
		<region id="systemInformation" order="2" displayType="editable" label="smk.systemData.region.label">
			<fields>
				<field name="type" codelist="CL7" tooltip="smk.type.tooltip" >
					<value>Issue</value>
				</field>
				<field name="identifier" tooltip="smk.identifier.tooltip" rnc="${eval(SMK-${seq({+sepSequence})})}" />
				<field name="emf:version" tooltip="smk.version.tooltip" />
				<field name="createdOn" tooltip="smk.createdOn.tooltip" />
				<field name="createdBy" tooltip="smk.createdBy.tooltip" />
				<field name="modifiedOn" label="smk.modifiedOn.label" tooltip="smk.modifiedOn.tooltip" />
				<field name="modifiedBy" label="smk.modifiedBy.label" tooltip="smk.modifiedBy.tooltip" />
				<field name="lockedBy" tooltip="smk.lockedBy.tooltip" />
				<field name="references" tooltip="csIssue.references.tooltip" >
					<control id="PICKER" />
				</field>
				<field name="dependsOn" type="uri" displayType="editable" tooltip="csIssue.dependsOn.tooltip" multiValued="true" uri="emf:dependsOn">
					<control id="PICKER">
						<control-param id="range" name="range" />
					</control>
				</field>
				<field name="hasAttachment" type="uri" displayType="editable" label="smk.hasAttachment.label" tooltip="smk.hasAttachment.tooltip" multiValued="true" previewEmpty="false" uri="emf:hasAttachment">
					<control id="PICKER">
						<control-param id="range" name="range" />
					</control>
				</field>
				<field name="isAttachedTo" type="uri" displayType="readOnly" label="smk.attachmentOf.label" tooltip="smk.attachmentOf.tooltip" multiValued="true" previewEmpty="false" uri="emf:isAttachedTo">
					<control id="PICKER">
						<control-param id="range" name="range" />
					</control>
				</field>
				<field name="hasWatcher" label="smk.hasWatcher.label" tooltip="smk.hasWatcher.tooltip" />
				<field name="hasThumbnail" label="smk.hasThumbnail.label" tooltip="smk.hasThumbnail.tooltip" />
				<field name="emf:hasTemplate" label="smk.hasTemplate.label" tooltip="smk.hasTemplate.tooltip" />
				<field name="parentOf" tooltip="smk.parentOf.tooltip" previewEmpty="false" />
				<field name="hasParent" tooltip="smk.hasParent.tooltip" />
			</fields>
		</region>
	</regions>
	
	<transitions>
		<transition id="create" label="create" purpose="create">
			<fields>
				<field name="sendMail" type="an..200" displayType="system" >
					<value><![CDATA[
						var title = root.get('title');
						var issueType = codelist.getDescription(18, root.get('issueType'), 'da');
						var subject = '(Ny Emne) ' + issueType + ': ' + title;

						//extract assignee
						var assignee = root.get('assignee');

						//add all users to recipients
						var recipients = [];
						recipients.push(root.getAsString('assignee'));
						mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_assignee_object_smk", recipients, context, null);]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>
		<transition id="editDetails" order="1" />
		<transition id="reassign" order="5" >
			<fields>
				<field name="attachToConfig" type="json">
					<value>{
						"predefinedTypes" : ["emf:User"],
						"selection" : "single",
						"relation" : ["emf:hasAssignee"],
						"restrictions" : {"field": "emf:status", "operator": "in", "type": "codeList", "value": ["ACTIVE"]}
						}
						}</value>
					<control id="configuration" />
				</field>
				<field name="beforeReasing" type="an..200" displayType="system" >
					<value>
						<![CDATA[
							//add to context old assignee
							context.put('previousAsignee', root.get('assignee'));
						]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">before</control-param>
						<control-param id="async" name="async">false</control-param>
					</control>
				</field>
				<field name="onReassignIssue" type="an10">
					<value><![CDATA[
						var title = root.get('title');
						var issueType = codelist.getDescription(18, root.get('issueType'), 'da');
						var subject = '(Overdraget) ' + issueType + ': ' + title;
						
						//extract watchers
						var recipients = [];
						var watchers = root.get('hasWatcher');
						if(watchers != null){
							for(var i = 0; i < watchers.length; i++){
								recipients.push(watchers[i].toString());
							}
						}
						//extract assignee, reporter and old assignee
						recipients.push(root.getAsString('assignee'));
						recipients.push(root.getAsString('hasReporter'));
						recipients.push(context.get('previousAsignee'));
						mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_reassigned_object_smk", recipients, context, null);]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>
		<transition id="clarify" tooltip="smk.clarify.action.tooltip" order="10" actionPath="/" >
			<fields>
				<field name="onClarify" type="an10">
					<value><![CDATA[
						var title = root.get('title');
						var issueType = codelist.getDescription(18, root.get('issueType'), 'da');
						var subject = '(Skal afklares) ' + issueType + ': ' + title;
						
						//extract warchers
						var watchers = root.get('hasWatcher');
						
						var recipients = [];
						var i = 0;
						if (watchers != null){
							for(i = 0; i < watchers.length; i++) {
								recipients.push(watchers[i].toString());
							}
						}	
						recipients.push(root.getAsString('assignee'));
						recipients.push(root.getAsString('hasReporter'));
						mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_clarify_object_smk", recipients, context);]]>
						</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>	
			</fields>
		</transition>
		<transition id="startProgress" order="15" actionPath="/" >
			<fields>
				<field name="onStartIssue" type="an10">
					<value><![CDATA[
						var title = root.get('title');
						var issueType = codelist.getDescription(18, root.get('issueType'), 'da');
						var subject = '(PÃ¥begyndt) ' + issueType + ': ' + title;
		
						//extract warchers
						var watchers = root.get('hasWatcher');
						var recipients = [];
						var i = 0;
						if (watchers != null){
							for(i = 0; i < watchers.length; i++) {
								recipients.push(watchers[i].toString());
							}
						}	
						recipients.push(root.getAsString('assignee'));
						recipients.push(root.getAsString('hasReporter'));
						mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_start_object_smk", recipients, context);]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>	
		</transition>
		<transition id="clarified" tooltip="smk.clarified.action.tooltip" order="20" actionPath="/" >
			<fields>
				<field name="onClarified" type="an10">
					<value><![CDATA[
						var title = root.get('title');
						var issueType = codelist.getDescription(18, root.get('issueType'), 'da');
						var subject = '(Afklaret) ' + issueType + ': ' + title;
						
						//extract warchers
						var watchers = root.get('hasWatcher');
						
						var recipients = [];
						var i = 0;
						if (watchers != null){
							for(i = 0; i < watchers.length; i++) {
								recipients.push(watchers[i].toString());
							}
						}	
						recipients.push(root.getAsString('assignee'));
						recipients.push(root.getAsString('hasReporter'));
						mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_clarified_object_smk", recipients, context);]]>
						</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>	
			</fields>
		</transition>
		<transition id="suspend" tooltip="smk.suspend.action.tooltip" order="25" actionPath="/" >
			<fields>
				<field name="onSuspendIssue" type="an10">
					<value><![CDATA[
						var title = root.get('title');
						var issueType = codelist.getDescription(18, root.get('issueType'), 'da');
						var subject = '(Suspenderet) ' + issueType + ': ' + title;
		
						//extract warchers
						var watchers = root.get('hasWatcher');
						
						var recipients = [];
						var i = 0;
						if (watchers != null){
							for(i = 0; i < watchers.length; i++) {
								recipients.push(watchers[i].toString());
							}
						}	
						recipients.push(root.getAsString('assignee'));
						recipients.push(root.getAsString('hasReporter'));
						mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_suspend_object_smk", recipients, context);]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>
		<transition id="resolveIssue" tooltip="smk.resolveIssue.action.tooltip" order="30" actionPath="/" >
			<fields>
				<field name="onResolveIssue" type="an10">
					<value><![CDATA[
						var title = root.get('title');
						var issueType = codelist.getDescription(18, root.get('issueType'), 'da');
						var subject = '(Afklaret/lÃ¸st) ' + issueType + ': ' + title;
		
						//extract warchers
						var watchers = root.get('hasWatcher');
						
						var recipients = [];
						var i = 0;
						if (watchers != null){
							for(i = 0; i < watchers.length; i++) {
								recipients.push(watchers[i].toString());
							}
						}	
						recipients.push(root.getAsString('assignee'));
						recipients.push(root.getAsString('hasReporter'));
						mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_resolve_object_smk", recipients, context);]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>
		<transition id="restart" tooltip="smk.clarified.action.tooltip" order="35" actionPath="/" >
			<fields>
				<field name="onRestartIssue" type="an10">
					<value><![CDATA[
						var title = root.get('title');
						var issueType = codelist.getDescription(18, root.get('issueType'), 'da');
						var subject = '(Genstartet) ' + issueType + ': ' + title;
						
						//extract warchers
						var watchers = root.get('hasWatcher');
						
						var recipients = [];
						var i = 0;
						if (watchers != null){
							for(i = 0; i < watchers.length; i++) {
								recipients.push(watchers[i].toString());
							}
						}	
						recipients.push(root.getAsString('assignee'));
						recipients.push(root.getAsString('hasReporter'));
						mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_restart_object_smk", recipients, context);]]>
						</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>	
			</fields>
		</transition>
		<transition id="reopen" tooltip="smk.reopenIssue.action.tooltip" order="40" actionPath="/" >
			<fields>
				<field name="onReopenIssue" type="an10">
					<value><![CDATA[
						var title = root.get('title');
						var issueType = codelist.getDescription(18, root.get('issueType'), 'da');
						var subject = '(GenÃ¥bnet) ' + issueType + ': ' + title;
						
						//extract warchers
						var watchers = root.get('hasWatcher');
						
						var recipients = [];
						var i = 0;
						if (watchers != null){
							for(i = 0; i < watchers.length; i++) {
								recipients.push(watchers[i].toString());
							}
						}	
						recipients.push(root.getAsString('assignee'));
						recipients.push(root.getAsString('hasReporter'));
						mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_reopen_object_smk", recipients, context);]]>
						</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>	
			</fields>
		</transition>	
		<transition id="complete" order="45" actionPath="/" >
			<fields>
				<field name="onCompleteIssue" type="an10">
					<value><![CDATA[
						var title = root.get('title');
						var issueType = codelist.getDescription(18, root.get('issueType'), 'da');
						var subject = '(Afsluttet) ' + issueType + ': ' + title;
						
						//extract warchers
						var watchers = root.get('hasWatcher');
						
						var recipients = [];
						var i = 0;
						if (watchers != null){
							for(i = 0; i < watchers.length; i++) {
								recipients.push(watchers[i].toString());
							}
						}	
						recipients.push(root.getAsString('assignee'));
						recipients.push(root.getAsString('hasReporter'));
						mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_complate_object_smk", recipients, context);]]>
						</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>	
			</fields>
		</transition>
		
		<group id="add" order="50" label="add.group.label" type="menu" />
		<transition id="addAttachment" label="smk.addAttachment.action.label" tooltip="smk.addAttachment.action.tooltip" purpose="addRelation" group="add">
			<fields>
				<field name="attachToConfig" type="json">
					<value>{
							"predefinedTypes" : [],
							"selection" : "multiple",
							"relation" : ["emf:hasAttachment"],
							"implicitParams" : {
							"removeExisting" : false
							}
						}</value>
					<control id="configuration" />
				</field>
			</fields>
		</transition>
		<transition id="addReferences" label="smk.addReferences.action.label" tooltip="smk.addReferences.action.tooltip" purpose="addRelation" group="add">
			<fields>
				<field name="attachToConfig" type="json">
					<value>
							{
								"selection" : "multiple",
								"relation" : ["emf:references"],
								"implicitParams" : {
									"removeExisting" : false
								 }
							}
					</value>
					<control id="configuration" />
				</field>
			</fields>
		</transition>
		<transition id="addWatchers" label="addWatchers.label" tooltip="addWatchers.tooltip" purpose="addRelation" group="add">
			<fields>
				<field name="addAttachmentConfig" type="json">
					<value>{
							"predefinedTypes" : ["emf:User"],
							"selection" : "multiple",
							"relation" : ["emf:hasWatcher"],
							"restrictions" : {"field": "emf:status", "operator": "in", "type": "codeList", "value": ["ACTIVE"]}
							}
						}</value>
					<control id="configuration" />
				</field>
			</fields>
		</transition>
		<transition id="addThumbnail" group="add" />
		
		<group id="exportAs" order="55" label="exportAs.group.label" type="menu" />
		<transition id="exportTabPDF" group="exportAs" />
		<transition id="exportPDF" group="exportAs" />
		<transition id="exportTabWord" group="exportAs" />
		<transition id="exportWord" group="exportAs" />
	
		<group id="print" order="60" label="print.group.label" type="menu" />
		<transition id="printTab" group="print" />
		<transition id="print" group="print" />
		
		<group id="template" order="65" label="template.group.label" type="menu" />
		<transition id="saveAsTemplate" group="template" />
		<transition id="updateTemplate" tooltip="smk.updateTemplate.action.tooltip" group="template" />
		<transition id="changeTemplate" tooltip="smk.changeTemplate.action.tooltip" group="template" />
		
		<group id="more" order="70" label="more.group.label" type="menu" />
		<transition id="clone" group="more" />
		<transition id="lock" group="more" />
		<transition id="unlock" actionPath="/" group="more" />
		<transition id="managePermissions" group="more" />
		
		<transition id="delete" order="100" />
	</transitions>
	
	<stateTransitions>
		<stateTransition from="INIT" transition="create" to="OPEN" />
		<stateTransition from="INIT" transition="clone" to="OPEN" />
		
		<!-- OPEN -->
		<stateTransition from="OPEN" transition="editDetails" to="OPEN" />
		<stateTransition from="OPEN" transition="startProgress" to="IN_PROGRESS" />
		<stateTransition from="OPEN" transition="clarify" to="CLARIFY" />
		
		<stateTransition from="OPEN" transition="reassign" to="OPEN" />
		<stateTransition from="OPEN" transition="addAttachment" to="OPEN" />
		<stateTransition from="OPEN" transition="printTab" to="OPEN" />
		<stateTransition from="OPEN" transition="print" to="OPEN" />
		<stateTransition from="OPEN" transition="exportTabPDF" to="OPEN" />
		<stateTransition from="OPEN" transition="exportPDF" to="OPEN" />
		<stateTransition from="OPEN" transition="exportTabWord" to="OPEN" />
		<stateTransition from="OPEN" transition="exportWord" to="OPEN" />
		<stateTransition from="OPEN" transition="clone" to="OPEN" />
		<stateTransition from="OPEN" transition="lock" to="OPEN" />
		<stateTransition from="OPEN" transition="unlock" to="OPEN" />
		<stateTransition from="OPEN" transition="addWatchers" to="OPEN" />
		<stateTransition from="OPEN" transition="saveAsTemplate" to="OPEN" />
		<stateTransition from="OPEN" transition="addThumbnail" to="OPEN" />
		<stateTransition from="OPEN" transition="managePermissions" to="OPEN" />
		<stateTransition from="OPEN" transition="delete" to="OPEN" />
		<stateTransition from="OPEN" transition="createInContext" to="OPEN" />
		<stateTransition from="OPEN" transition="changeTemplate" to="OPEN" />
		<stateTransition from="OPEN" transition="updateTemplate" to="OPEN" />
		<stateTransition from="OPEN" transition="addReferences" to="OPEN" />
		
		<!-- IN_PROGRESS -->
		<stateTransition from="IN_PROGRESS" transition="editDetails" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="suspend" to="ON_HOLD" />
		<stateTransition from="IN_PROGRESS" transition="resolveIssue" to="RESOLVED">
			<condition id="requiredFields" renderAs="REQUIRED">[resolution]</condition>
		</stateTransition>
		<stateTransition from="IN_PROGRESS" transition="clarify" to="CLARIFY" />
		
		<stateTransition from="IN_PROGRESS" transition="reassign" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="addAttachment" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="printTab" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="print" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="exportTabPDF" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="exportPDF" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="exportTabWord" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="exportWord" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="clone" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="lock" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="unlock" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="addWatchers" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="saveAsTemplate" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="addThumbnail" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="managePermissions" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="createInContext" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="changeTemplate" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="updateTemplate" to="IN_PROGRESS" />
		<stateTransition from="IN_PROGRESS" transition="addReferences" to="IN_PROGRESS" />
		
		<!-- CLARIFY -->
		<stateTransition from="CLARIFY" transition="editDetails" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="clarified" to="IN_PROGRESS" />
		
		<stateTransition from="CLARIFY" transition="reassign" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="addAttachment" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="printTab" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="print" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="exportTabPDF" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="exportPDF" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="exportTabWord" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="exportWord" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="clone" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="lock" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="unlock" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="addWatchers" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="saveAsTemplate" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="addThumbnail" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="managePermissions" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="createInContext" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="changeTemplate" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="updateTemplate" to="CLARIFY" />
		<stateTransition from="CLARIFY" transition="addReferences" to="CLARIFY" />
		
		<!-- ON_HOLD -->
		<stateTransition from="ON_HOLD" transition="editDetails" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="restart" to="IN_PROGRESS" />
		
		<stateTransition from="ON_HOLD" transition="reassign" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="addAttachment" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="printTab" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="print" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="exportTabPDF" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="exportPDF" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="exportTabWord" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="exportWord" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="clone" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="lock" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="unlock" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="addWatchers" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="saveAsTemplate" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="addThumbnail" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="managePermissions" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="createInContext" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="changeTemplate" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="updateTemplate" to="ON_HOLD" />
		<stateTransition from="ON_HOLD" transition="addReferences" to="ON_HOLD" />
		
		<!-- RESOLVED -->
		<stateTransition from="RESOLVED" transition="editDetails" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="reopen" to="OPEN" />
		<stateTransition from="RESOLVED" transition="complete" to="COMPLETED" />
		
		<stateTransition from="RESOLVED" transition="reassign" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="addAttachment" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="printTab" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="print" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="exportTabPDF" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="exportPDF" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="exportTabWord" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="exportWord" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="clone" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="lock" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="unlock" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="addWatchers" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="saveAsTemplate" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="addThumbnail" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="managePermissions" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="createInContext" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="changeTemplate" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="updateTemplate" to="RESOLVED" />
		<stateTransition from="RESOLVED" transition="addReferences" to="RESOLVED" />
		
		<!-- COMPLETED -->
		<stateTransition from="COMPLETED" transition="reopen" to="OPEN" />
		<stateTransition from="COMPLETED" transition="printTab" to="COMPLETED" />
		<stateTransition from="COMPLETED" transition="print" to="COMPLETED" />
		<stateTransition from="COMPLETED" transition="exportTabPDF" to="COMPLETED" />
		<stateTransition from="COMPLETED" transition="exportPDF" to="COMPLETED" />
		<stateTransition from="COMPLETED" transition="exportTabWord" to="COMPLETED" />
		<stateTransition from="COMPLETED" transition="exportWord" to="COMPLETED" />
		<stateTransition from="COMPLETED" transition="clone" to="COMPLETED" />
		<stateTransition from="COMPLETED" transition="saveAsTemplate" to="COMPLETED" />
		<stateTransition from="COMPLETED" transition="managePermissions" to="COMPLETED" />
	</stateTransitions>
	
	<allowedChildren>
		<child type="document" id="all"/>
		<child type="object" id="smkAudio"/>
		<child type="object" id="smkVideo"/>
		<child type="object" id="smkImage"/>
		<child type="task" id="all"/>
	</allowedChildren>
	
	<labels>
		<label id="CS_ISSUE_TOOLTIP_HEADER">
			<value lang="en"><![CDATA[${eval(#{eval(
				<span class="thumbnail-content">
					<img class="thumbnail" src="${thumbnailUri(64)}" />
				</span>
				<span class="tooltip-data">
					<span class="tooltip-header">
						<a href="${link(currentInstance)}" class="instance-link" data-status="${get([status])}" data-id="${id.db}" data-uid="${id.uid}">
							<span data-property="type">${CL([type])}</span>:&nbsp;
							<span data-title="${get([title])}">${get([title])}</span>
						</a>
					</span>
					<span class="tooltip-row">
						<label>Isssue Type: </label>
						<span data-property="issueType">${CL([issueType])}</span>
					</span>
					<span class="tooltip-row">
						<label>Priority: </label>
						<span data-property="priority">${CL([priority])}</span>
					</span>
					<span class="tooltip-row">
						<label>Status: </label>
						<span data-property="status">${CL([status])}</span>
					</span>
					${if(${get([dueDate])}<>null).then(
						<span class="tooltip-row">
							<label>Due date: </label>
							<span data-property="dueDate">${date([dueDate])}</span>
						</span>
					)}	
					<span class="tooltip-row">
                        <label>Assignee: </label>
						<span data-property="assignee">${objectProperty(${get([assignee])})}</span>
                    </span>
					<span class="tooltip-row">
                        <label>Reporter: </label>
						<span data-property="hasReporter">${objectProperty(${get([hasReporter])})}</span>
                    </span>
					${if(${get([references])}<>null).then(
						<span class="tooltip-row">
							<label>References: </label>
							<span data-property="references">${objectProperty(${get([references])})}</span>
						</span>
					)}
					<span class="tooltip-row">
						<label>Version: </label>
						<span data-property="emf:version">${get([emf:version])}</span>
					</span>
					<span class="tooltip-row">
						<label>System modified by: </label>
						<span data-property="modifiedBy">${user(${get([modifiedBy])})}</span>
					</span>
					<span class="tooltip-row">
						<label>System modified on: </label>
						<span data-property="modifiedOn">${date([modifiedOn])}</span>
					</span>
					${if(${get([lockedBy])} <> null).then(
						<span class="tooltip-row">
							<label>${label(lockedBy)}:</label>
							<span data-property="lockedBy">${objectProperty(${get([lockedBy])})}</span>                      
						</span>
					)}	
				</span>
			)})}]]></value>
			<value lang="da"><![CDATA[${eval(#{eval(
				<span class="thumbnail-content">
					<img class="thumbnail" src="${thumbnailUri(64)}" />
				</span>
				<span class="tooltip-data">
					<span class="tooltip-header">
						<a href="${link(currentInstance)}" class="instance-link" data-status="${get([status])}" data-id="${id.db}" data-uid="${id.uid}">
							<span data-property="type">${CL([type])}</span>:&nbsp;
							<span data-title="${get([title])}">${get([title])}</span>
						</a>
					</span>
					<span class="tooltip-row">
						<label>Problemtype: </label>
						<span data-property="issueType">${CL([issueType])}</span>
					</span>
					<span class="tooltip-row">
						<label>Prioritet: </label>
						<span data-property="priority">${CL([priority])}</span>
					</span>
					<span class="tooltip-row">
						<label>Status: </label>
						<span data-property="status">${CL([status])}</span>
					</span>
					${if(${get([dueDate])}<>null).then(
						<span class="tooltip-row">
							<label>Forfaldsdato: </label>
							<span data-property="dueDate">${date([dueDate])}</span>
						</span>
					)}	
					<span class="tooltip-row">
                        <label>Ansvarlig: </label>
						<span data-property="assignee">${objectProperty(${get([assignee])})}</span>
                    </span>
					<span class="tooltip-row">
                        <label>RapportÃ¸r: </label>
						<span data-property="hasReporter">${objectProperty(${get([hasReporter])})}</span>
                    </span>
					${if(${get([references])}<>null).then(
						<span class="tooltip-row">
							<label>Referencer: </label>
							<span data-property="references">${objectProperty(${get([references])})}</span>
						</span>
					)}
					<span class="tooltip-row">
						<label>Version: </label>
						<span data-property="emf:version">${get([emf:version])}</span>
					</span>
					<span class="tooltip-row">
						<label>Opdateret af: </label>
						<span data-property="modifiedBy">${user(${get([modifiedBy])})}</span>
					</span>
					<span class="tooltip-row">
						<label>Opdateret: </label>
						<span data-property="modifiedOn">${date([modifiedOn])}</span>
					</span>
					${if(${get([lockedBy])} <> null).then(
						<span class="tooltip-row">
							<label>${label(lockedBy)}:</label>
							<span data-property="lockedBy">${objectProperty(${get([lockedBy])})}</span>                      
						</span>
					)}
				</span>
			)})}]]></value>
		</label>
		<label id="CS_ISSUE_DEFAULT_HEADER">
			<value lang="en"><![CDATA[${eval(
                ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
				${var.isVersion= ${if(${get([isVersion])} == true).then(true).else(false)}}
                <span ><img src="${thumbnailUri(64)}"/></span>
                <span class="truncate-element">
					${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
					<b>
						<a class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href}>
							${if(${get([emf:isDeleted])} == true).then(<span>(Deleted)</span>&nbsp;)}
							<span data-property="identifier">${get([identifier])}</span>,&nbsp;
							<span data-property="title">${get([title])}</span>
						</a>&nbsp;
					</b>	
					${if(${get([status])}==CLARIFY).then((<span data-property="status" style=color:#ff0000;>${CL([status])}</span>)).else((<span data-property="status">${CL([status])}</span>))}
				</br>
					<span data-property="type">${CL([type])}</span>:&nbsp;
					<span data-property="issueType">${CL([issueType])}</span>,&nbsp;
					<span data-property="priority">${CL([priority])}</span>
					${if(${var.isVersion}).then(
							&nbsp;<span class="document-version version badge">${get([emf:version])}</span>
					)}
                </span>)}]]>
			</value>
			<value lang="da"><![CDATA[${eval(
                ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
				${var.isVersion= ${if(${get([isVersion])} == true).then(true).else(false)}}
                <span ><img src="${thumbnailUri(64)}"/></span>
                <span class="truncate-element">
					${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
					<b>
						<a class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href}>
							${if(${get([emf:isDeleted])} == true).then(<span>(Slettet)</span>&nbsp;)}
							<span data-property="identifier">${get([identifier])}</span>,&nbsp;
							<span data-property="title">${get([title])}</span>
						</a>&nbsp;
					</b>	
					${if(${get([status])}==CLARIFY).then((<span data-property="status" style=color:#ff0000;>${CL([status])}</span>)).else((<span data-property="status">${CL([status])}</span>))}
				</br>
					<span data-property="type">${CL([type])}</span>:&nbsp;
					<span data-property="issueType">${CL([issueType])}</span>,&nbsp;
					<span data-property="priority">${CL([priority])}</span>
					${if(${var.isVersion}).then(
							&nbsp;<span class="document-version version badge">${get([emf:version])}</span>
					)}
                </span>)}]]>
			</value>
		</label>
		<label id="CS_ISSUET_COMPACT_HEADER">
			<value lang="en"><![CDATA[${eval(
                ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
				${var.isVersion= ${if(${get([isVersion])} == true).then(true).else(false)}}
                <span ><img src="${thumbnailUri(16)}"/></span>
                ${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
				<span class="truncate-element">
					<a class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href}>
						${if(${get([emf:isDeleted])} == true).then(<span>(Deleted)</span>&nbsp;)}
							<span data-property="issueType">${CL([issueType])}</span>:&nbsp;
							<span data-property="identifier">${get([identifier])}</span>,&nbsp;
							<span data-property="title">${get([title])}</span>
					</a>		
						${if(${var.isVersion}).then(
							&nbsp;<span class="document-version version badge">${get([emf:version])}</span>
						)}
				</span>)}]]>
			</value>
			<value lang="da"><![CDATA[${eval(
                ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
				${var.isVersion= ${if(${get([isVersion])} == true).then(true).else(false)}}
                <span ><img src="${thumbnailUri(16)}"/></span>
                ${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
				<span class="truncate-element">
					<a class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href}>
						${if(${get([emf:isDeleted])} == true).then(<span>(Slettet)</span>&nbsp;)}
							<span data-property="issueType">${CL([issueType])}</span>:&nbsp;
							<span data-property="identifier">${get([identifier])}</span>,&nbsp;
							<span data-property="title">${get([title])}</span>
					</a>		
						${if(${var.isVersion}).then(
							&nbsp;<span class="document-version version badge">${get([emf:version])}</span>
						)}
				</span>)}]]>
			</value>
		</label>
		<label id="CS_ISSUE_BREADCRUMB_HEADER">
			<value lang="en"><![CDATA[${eval(
                ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
                ${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
                ${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
                <span ><img src="${thumbnailUri(16)}"/></span>
               ${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
 				<span>
					<a class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href}>
						${if(${get([emf:isDeleted])} == true).then(<span>(Deleted)</span></>&nbsp;)}
						<span data-property="identifier">${get([identifier])}</span>,&nbsp;
						<span data-property="title">${get([title])}</span>
					</a>
				</span>)}]]>
			</value>
			<value lang="da"><![CDATA[${eval(
                ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
                ${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
                ${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
                <span ><img src="${thumbnailUri(16)}"/></span>
               ${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
 				<span>
					<a class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href}>
						${if(${get([emf:isDeleted])} == true).then(<span>(Slettet)</span></>&nbsp;)}
						<span data-property="identifier">${get([identifier])}</span>,&nbsp;
						<span data-property="title">${get([title])}</span>
					</a>
				</span>)}]]>
			</value>
		</label>
	</labels>
</definition>
