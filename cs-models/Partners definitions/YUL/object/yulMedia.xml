<?xml version="1.0"?>
<definition id="yulMedia" parentId="baseMedia" isAbstract="true" type="object">
	<fields>
		<!-- headers and tooltips-->
		<field name="default_header" type="ANY" label="MEDIA_DEFAULT_HEADER_YUL" />
		<field name="compact_header" type="ANY" label="MEDIA_COMPACT_HEADER_YUL" />
		<field name="breadcrumb_header" type="ANY" label="MEDIA_BREADCRUMB_HEADER_YUL" />		
		<field name="tooltip_header" type="ANY" label="MEDIA_TOOLTIP_HEADER_YUL" />

		<!-- all properties from the generic definition will be organized in regions -->		
		<field name="outcome" displayType="system" />
		<field name="completedOn" displayType="system" />
		<field name="integrated" displayType="system" />
		<field name="uri" displayType="system" />
		<field name="hasRevision" displayType="system" />
		<field name="isRevisionOf" displayType="system" />
		<field name="lastPublishedRevision" displayType="system" />
		<field name="lastRevision" displayType="system" />
		<field name="nextRevision" displayType="system" />
		<field name="previousRevision" displayType="system" />
	</fields>

	<regions>	
		<region id="generalData" displayType="editable" order="10" label="yul.generalData.region.label">
			<fields>
				<field name="title" type="an..1000" tooltip="yul.title.tooltip" />
				<field name="description" type="an..1024" displayType="editable" tooltip="yul.description.tooltip" />
			</fields>
		</region>
		<region id="systemData" displayType="editable" order="20" label="yul.systemData.region.label">
			<fields>
				<field name="type" tooltip="yul.type.tooltip" >
					<value>yulMedia</value>
				</field>
				<field name="identifier" tooltip="yul.identifier.tooltip" rnc="${eval(MED${seq({+medSequence})})}" />
				<field name="name" tooltip="yul.name.tooltip" />
				<field name="mimetype" />
				<field name="size" label="yul.size.label" tooltip="yul.size.tooltip" />
				<field name="status" codelist="CL114" tooltip="yul.status.tooltip" />
				<field name="emf:version" tooltip="yul.version.tooltip" /> 

				<!-- object properties (relationships) -->
				<field name="createdOn" tooltip="yul.createdOn.tooltip" />
				<field name="createdBy" tooltip="yul.createdBy.tooltip" />
				<field name="modifiedOn" label="yul.modifiedOn.label" tooltip="yul.modifiedOn.tooltip" />
				<field name="modifiedBy" label="yul.modifiedBy.label" tooltip="yul.modifiedBy.tooltip" />
				<field name="lockedBy" tooltip="yul.lockedBy.tooltip" />
				<field name="hasThumbnail" label="yul.hasThumbnail.label" tooltip="yul.hasThumbnail.tooltip" />
				<field name="hasAttachment" type="uri" displayType="editable" label="yul.attachments.label" tooltip="yul.hasAttachment.tooltip" multiValued="true" uri="emf:hasAttachment" >
					<control id="PICKER">
						<control-param id="range" name="range">emf:Project,yul:Activity,emf:Document,emf:Task,chc:CulturalObject,emf:Image,emf:Audio,emf:Video,chc:Sample,emf:BusinessProcess</control-param>
					</control>
				</field>
				<field name="attachmentOf" type="uri" displayType="editable" label="yul.attachmentOf.label" tooltip="yul.attachmentOf.tooltip" multiValued="true" uri="emf:isAttachedTo" >
					<control id="PICKER">
						<control-param id="range" name="range">emf:Project,yul:Activity,emf:Document,emf:Task,chc:CulturalObject,emf:Image,emf:Audio,emf:Video,chc:Sample,emf:BusinessProcess</control-param>
					</control>
				</field>
				<field name="hasWatcher" label="yul.hasWatcher.label" tooltip="yul.hasWatcher.tooltip" />
				<field name="parentOf" tooltip="yul.parentOf.tooltip" />
				<field name="hasParent" tooltip="yul.hasParent.tooltip" previewEmpty="true" />
				<field name="partOf" displayType="readonly" tooltip="yul.partOf.tooltip" previewEmpty="true" />
				<field name="hasChild" tooltip="yul.hasChild.tooltip" />
				<field name="emf:hasTemplate" label="yul.hasTemplate.label" tooltip="yul.hasTemplate.tooltip" />
			</fields>
		</region>
	</regions>

	<transitions>	
		<transition id="editDetails" order="10" actionPath="/actions" />
		<transition id="uploadNewVersion" order="15" />
		<transition id="download" order="20" actionPath="/" />
		
		<group id="add" order="25" label="add.group.label" type="menu" />		
		<transition id="addAttachment" label="yul.addAttachment.action.label"  tooltip="yul.addAttachment.action.tooltip" purpose="addRelation" group="add" >
			<fields>
				<field name="addAttachmentConfig" type="json">
					<value>
							{
								"predefinedTypes" : ["emf:Project","yul:Activity","emf:Document","emf:Task","chc:CulturalObject","emf:Image","emf:Audio","emf:Video","chc:Sample","emf:BusinessProcess"],
								"selection" : "multiple",
								"relation" : ["emf:hasAttachment"]
							}
					</value>
					<control id="configuration" />
				</field>
			</fields>
		</transition>
		<transition id="addThumbnail" group="add" />
		<transition id="addWatchers" label="addWatchers.label" tooltip="addWatchers.tooltip" purpose="addRelation" group="add" >		
			<fields>
				<field name="addWatcherConfig" type="json">
					<value>						
							{
								"predefinedTypes" : ["emf:User"],
								"selection" : "multiple",
								"relation" : ["emf:hasWatcher"],
								"restrictions" : {"field": "emf:status", "operator": "in", "type": "codeList", "value": ["ACTIVE"]}
							}
					</value>
					<control id="configuration" />
				</field>
			</fields>
		</transition>
		
		<group id="exportAs" order="30" label="exportAs.group.label" type="menu" />
		<transition id="exportTabPDF" group="exportAs" />
		<transition id="exportPDF" group="exportAs"  />
		<transition id="exportTabWord" group="exportAs"  />	
		<transition id="exportWord" group="exportAs"  />
		
		<group id="print" order="35" label="print.group.label" type="menu" />
		<transition id="printTab" group="print" />
		<transition id="print" group="print" />
		
		<group id="template" order="36" label="template.group.label" type="menu" />
		<transition id="saveAsTemplate" group="template" />	
		<transition id="updateTemplate" tooltip="yul.updateTemplate.action.tooltip" group="template" />
		<transition id="changeTemplate" tooltip="yul.changeTemplate.action.tooltip" group="template" />
		
		<group id="more" order="40" label="more.group.label" type="menu" />
		<transition id="move" confirmation="move.confirm" group="more" >
			<fields>
				<field name="sendMail" type="an..200" displayType="system" >
					<value>
						<![CDATA[	
							var type = codelist.getDescription(7, root.get('type'), 'en');
							var title = root.get('title');
							var subject = '(Moved) ' + type + ' - ' + title;
							
							//extract warchers and crearedBy users
							var watchers = root.get('hasWatcher');
							var createdBy = root.get('createdBy');
							var recipients = [];
							var i = 0;
							if (watchers != null){
								for(i = 0; i < watchers.length; i++) {
									recipients.push(watchers[i].toString());
								}
							}	
							recipients.push(createdBy.toString());
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_move_object_yul", recipients, context);
						]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>
		<transition id="clone" confirmation="clone.confirm" group="more" />
		<transition id="lock" group="more" />
		<transition id="unlock" group="more" actionPath="/" />
		<transition id="managePermissions" group="more" />
		
		<transition id="delete" order="100" tooltip="yul.delete.tooltip" >
			<fields>
				<field name="sendMail" type="an..200" displayType="system" >
                    <value>
						<![CDATA[	
							var type = codelist.getDescription(7, root.get('type'), 'en');
							var title = root.get('title');
							var subject = '(Deleted) ' + type + ' - ' + title;
							
							//extract warchers and crearedBy users
							var watchers = root.get('hasWatcher');
							var createdBy = root.get('createdBy');
							var recipients = [];
							var i = 0;
							if (watchers != null){
								for(i = 0; i < watchers.length; i++) {
									recipients.push(watchers[i].toString());
								}
							}	
							recipients.push(createdBy.toString());
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_delete_object_yul", recipients, context);
						]]>
                    </value>
                    <control id="SCRIPT">
                        <control-param id="phase" name="phase">after</control-param>
                        <control-param id="async" name="async">false</control-param>
                    </control>
                </field>
			</fields>
		</transition>
		<transition id="revertVersion" order="101" actionPath="/" />
	</transitions>

	<stateTransitions>
		<stateTransition from="INIT" transition="create" to="DRAFT"/>
		<stateTransition from="INIT" transition="clone" to="DRAFT"/>

		<stateTransition from="DRAFT" transition="editDetails" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="uploadNewVersion" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="download" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="addAttachment" to="DRAFT" />
		<stateTransition from="DRAFT" transition="addThumbnail" to="DRAFT" />
		<stateTransition from="DRAFT" transition="addWatchers" to="DRAFT" />
		<stateTransition from="DRAFT" transition="print" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="printTab" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="exportPDF" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="exportTabPDF" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="exportWord" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="exportTabWord" to="DRAFT"/>

		<stateTransition from="DRAFT" transition="clone" to="DRAFT"/>	
		<stateTransition from="DRAFT" transition="move" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="lock" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="unlock" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="saveAsTemplate" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="changeTemplate" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="updateTemplate" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="managePermissions" to="DRAFT" />
		<stateTransition from="DRAFT" transition="revertVersion" to="DRAFT" />
		<stateTransition from="DRAFT" transition="createInContext" to="DRAFT" />
		
		<stateTransition from="DRAFT" transition="delete" to="DRAFT"/>
	</stateTransitions>
	
	<allowedChildren>
		<child type="document" id="all"/>
	</allowedChildren>
	
	<labels>	
		<label id="MEDIA_TOOLTIP_HEADER_YUL">
			<value lang="en">
				<![CDATA[${eval(#{eval(
				<span class="thumbnail-content">
					<img class="thumbnail" src="${thumbnailUri(64)}" />
				</span>
				<span class="tooltip-data">
					<span class="tooltip-header">
						<a href="${link(currentInstance)}" class="instance-link" data-status="${get([status])}" data-id="${id.db}" data-uid="${id.uid}">
							<span data-title="${get([title])}">${get([title])}</span>
						</a>
					</span>
					<span class="tooltip-row">
						<label>Type: </label>
						<span data-property="type">${CL([type])}</span>
					</span>
					<span class="tooltip-row">
						<label>Version: </label>
						<span data-property="emf:version">${get([emf:version])}</span>
					</span>
					<span class="tooltip-row">
						<label>System modified by: </label>
						<span data-property="modifiedBy">${objectProperty(${get([modifiedBy])})}</span>
					</span>
					<span class="tooltip-row">
						<label>System modified on: </label>
						<span data-property="modifiedOn">${date([modifiedOn])}</span>
					</span>
					${if(${get([lockedBy])} <> null).then(
						<span class="tooltip-row">
							<label>${label(lockedBy)}:</label>
							<span data-property="lockedBy">${objectProperty(${get([lockedBy])})}</span>                      
						</span>
					)}
			</span>)})}]]></value>
		</label>
		<label id="MEDIA_DEFAULT_HEADER_YUL">
			<value lang="en">
				<![CDATA[${eval(
				${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")}}
				${var.isVersion= ${if(${get([isVersion])} == true).then(true).else(false)}}
				<span><img src="${thumbnailUri(64)}"/></span>
				<span>
					${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
					<span data-property="type">${CL([type])}</span>
					<br />
					<span class="truncate-element">
						<b>
							<a class="${get([status])} instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href} uid="${id.uid}">
								${if(${get([title])}<>${get([name])}).then(<span data-property="title">${get([title])}</span>&nbsp;/&nbsp;)}
								<span data-property="name">${get([name])}</span>
							</a>
						</b>	
					</span>
					${if(${var.isVersion}).then(
						&nbsp;<span data-property="emf:version" class="object-version version badge">${get([emf:version])}</span>
					)}
				</span>
			)}]]></value>
		</label>
		<label id="MEDIA_COMPACT_HEADER_YUL">
			<value lang="en">
				<![CDATA[${eval(
			${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")}}
			${var.isVersion= ${if(${get([isVersion])} == true).then(true).else(false)}}
			<span><img src="${thumbnailUri(16)}"/></span>
			<span class="truncate-element">
				${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
				<a class="${get([status])} instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href} uid="${id.uid}" style="vertical-align:baseline;">
					${if(${get([emf:isDeleted])} == true).then(<span>(Deleted)</span>&nbsp)}
					${if(${get([title])}<>${get([name])}).then(<span data-property="title">${get([title])}</span>&nbsp;/&nbsp;)}
					<span data-property="name">${get([name])}</span>
				</a>
				${if(${var.isVersion}).then(
					&nbsp;<span data-property="emf:version" class="object-version version badge">${get([emf:version])}</span>
				)}
			</span>
		)}]]></value>
		</label>
		<label id="MEDIA_BREADCRUMB_HEADER_YUL">
			<value lang="en">
				<![CDATA[${eval(
            ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
			<span><img src="${thumbnailUri(16)}"/></span>
			<span>
				${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
				<a class="${get([status])} instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href} uid="${id.uid}">
					${if(${get([emf:isDeleted])} == true).then(<span>(Deleted)</span>&nbsp)}
					<span data-property="name">${get([name])}</span>
				</a>
			</span>		
            )}]]></value>
		</label>		
	</labels>
</definition>
