<?xml version="1.0"?>
<definition id="coreAbstractDocument" type="document" parentId="baseDocument" isAbstract="true">
	<fields>
		<field name="default_header" type="ANY" label="DOCUMENT_DEFAULT_HEADER_CORE" />
		<field name="compact_header" type="ANY" label="DOCUMENT_COMPACT_HEADER_CORE"/>
		<field name="breadcrumb_header" type="ANY" label="DOCUMENT_BREADCRUMB_HEADER_CORE" />
		<field name="tooltip_header" type="ANY" label="DOCUMENT_TOOLTIP_HEADER_CORE" />
		
		<!-- all properties from the generic definition will be organized in regions --> 
		<field name="outcome" displayType="system" />
		<field name="completedOn" type="datetime" displayType="system" />
		<field name="uri" displayType="system" />
		<field name="ocrLanguage" displayType="system" />
	</fields>
	 
	<regions>	
		<region id="generalData" displayType="editable" order="10" label="core.generalData.region.label">
			<fields>
				<field name="chc:hasAuthor" type="uri" displayType="editable" mandatory="true" order="25" label="core.hasAuthor.label" tooltip="core.hasAuthor.tooltip" multiValued="true" uri="chc:hasAuthor" >
					<control id="PICKER">
						<control-param id="range" name="range">emf:User</control-param>
						<control-param id="restrictions" name="restrictions">{"field": "emf:status", "operator": "in", "type": "codeList", "value": ["ACTIVE"]}</control-param>
					</control>
				</field>	
				<field name="departmentName" type="an..50" displayType="editable" order="30" label="core.departmentName.label" tooltip="core.departmentName.tooltip" uri="emf:departmentName" >
					<control id="DEFAULT_VALUE_PATTERN">
						<control-param type="default_value_pattern" id="template" name="template">$[emf:createdBy.departmentName]</control-param>
					</control>
				</field>
				<field name="title" type="an..1000" order="45" tooltip="core.title.tooltip" />
				<field name="description" type="an..180" order="50" tooltip="core.description.tooltip" />
			</fields>
		</region>
		<region id="systemData" displayType="editable" order="20" label="core.systemData.region.label">
			<fields>
				<field name="type" tooltip="core.type.tooltip" >
					<value>coreAbstractDocument</value>
				</field>
				<field name="identifier" tooltip="core.identifier.tooltip" rnc="${eval(DC${seq({+dcSequence})})}" />
				<field name="name" tooltip="core.name.tooltip" />
				<field name="size" tooltip="core.size.tooltip" />
				<field name="mimetype" />
				<field name="status" tooltip="core.status.tooltip" />
				<field name="emf:version" tooltip="core.version.tooltip" /> 
				<field name="integrated" type="boolean" displayType="hidden" label="emf.integrated.label" uri="emf:integrated" />
				<!-- object properties (relationships) -->
				<field name="createdOn" tooltip="core.createdOn.tooltip" />
				<field name="createdBy" tooltip="core.createdBy.tooltip" />
				<field name="modifiedOn" label="core.modifiedOn.label" tooltip="core.modifiedOn.tooltip" />
				<field name="modifiedBy" label="core.modifiedBy.label" tooltip="core.modifiedBy.tooltip" />
				<field name="lockedBy" tooltip="core.lockedBy.tooltip" />
				<!-- related activity -->
				<field name="processedBy" type="uri" displayType="editable" label="core.processedBy.label" tooltip="core.processedBy.tooltip" multiValued="true" uri="emf:processedBy" >
					<control id="PICKER">
						<control-param id="range" name="range">emf:BusinessProcess,emf:Task</control-param>
					</control>
				</field>
				<field name="hasAttachment" type="uri" displayType="editable" label="core.hasAttachment.label" tooltip="core.hasAttachment.tooltip" multiValued="true" uri="emf:hasAttachment" >
					<control id="PICKER">
						<control-param id="range" name="range">emf:Document,emf:Image,emf:Audio,emf:Video,chc:Sample</control-param>
					</control>
				</field>
				<field name="attachmentOf" type="uri" displayType="editable" label="core.attachmentOf.label" tooltip="core.attachmentOf.tooltip" multiValued="true" uri="emf:isAttachedTo" >
					<control id="PICKER">
						<control-param id="range" name="range">emf:Project,chc:ConservationActivity,chc:Exhibition,emf:Task,emf:BusinessProcess,chc:CulturalObject,chc:Sample,emf:Document,emf:Image,emf:Audio,emf:Video,emf:Issue</control-param>
					</control>
				</field>
				<field name="hasWatcher" label="core.hasWatcher.label" tooltip="core.hasWatcher.tooltip" />
				<field name="hasThumbnail" label="core.hasThumbnail.label" tooltip="core.hasThumbnail.tooltip" />
				<field name="hasParent" tooltip="core.hasParent.tooltip" />
				<field name="parentOf" tooltip="core.parentOf.tooltip" previewEmpty="false" />
				<field name="partOf" displayType="readOnly" tooltip="core.partOf.tooltip" />
				<field name="hasChild" tooltip="core.hasChild.tooltip" uri="emf:hasChild" previewEmpty="false" />
				<field name="emf:hasTemplate" label="core.hasTemplate.label" tooltip="core.hasTemplate.tooltip" />
			</fields>
		</region>
		<region id="archivedRevisions" order="30" displayType="editable" label="core.revisions.region.label">
			<fields>
				<field name="hasRevision" label="core.hasRevision.label" tooltip="core.hasRevision.tooltip" />
				<field name="isRevisionOf" label="core.isRevisionOf.label" tooltip="core.isRevisionOf.tooltip" />
				<field name="lastPublishedRevision" tooltip="core.lastPublishedRevision.tooltip" />
				<field name="lastRevision" tooltip="core.lastRevision.tooltip" />
				<field name="nextRevision" tooltip="core.nextRevision.tooltip" />
				<field name="previousRevision" tooltip="core.previousRevision.tooltip" />
			</fields>
		</region>	
	</regions>
	
	<transitions>
		<transition id="editDetails" order="10" actionPath="/" />
		<transition id="uploadNewVersion" order="15" actionPath="/" />
		<transition id="complete" order="16" label="complete.label" tooltip="complete.tooltip" purpose="transition" confirmation="complete.confirm" actionPath="/" >
			<fields>
				<field name="sendMail" type="an..200" displayType="system" >
					<value>
						<![CDATA[	
							var title = root.get('title');
							var subject = '(Completed) ' + title;
							
							//extract warchers and crearedBy users
							var watchers = root.get('hasWatcher');
							var createdBy = root.get('createdBy');
							var recipients = [];
							var i = 0;
							if (watchers != null){
								for(i = 0; i < watchers.length; i++) {
									recipients.push(watchers[i].toString());
								}
							}
							recipients.push(root.get('createdBy').toString());
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_complete_object_core", recipients, context);
						]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>
		<transition id="reopenDoc" order="17" label="reopenDoc.action.label" tooltip="core.reopenDoc.action.tooltip" purpose="transition" confirmation="reopenDoc.confirm" actionPath="/" >
			<fields>
				<field name="sendMail" type="an..200" displayType="system" >
					<value>
						<![CDATA[
							var title = root.get('title');
							var subject = '(Reopen) ' + title;
							
							//extract warchers and createdBy users
							var watchers = root.get('hasWatcher');
							var createdBy = root.get('createdBy');
							var recipients = [];
							var i = 0;
							if (watchers != null){
								for(i = 0; i < watchers.length; i++) {
									recipients[i] = watchers[i].toString();
								}
							}	
							recipients.push(createdBy.toString());
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_reopen_object_core", recipients, context);
						]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>
		
		<transition id="createWorkflow" order="20" label="core.createWorkflow.action.label" tooltip="core.createWorkflow.action.tooltip" purpose="createInstance" >
      		<fields>
				<field name="createWorkflowConfig" type="json">
					<value>
						{ 
							"predefinedTypes" : ["emf:BusinessProcess"],
							"predefinedSubTypes" : ["reviewAndApproveReportsWF"],
							"contextSelectorDisabled": true
						}
  			 	  </value>
 		      	  <control id="configuration" />
 		   		</field>
 		   </fields>
		</transition>
		
		<group id="add" order="25" label="add.group.label" type="menu" />
		<transition id="addAttachment" label="core.addAttachment.action.label" tooltip="core.addAttachment.action.tooltip" purpose="addRelation" group="add" >
			<fields>
				<field name="attachToConfig" type="json">
					<value>
						{
							"predefinedTypes" : ["emf:Document","emf:Image","emf:Audio","emf:Video","chc:Sample"],
							"selection" : "multiple",
							"relation" : ["emf:hasAttachment"]
						}
					</value>
					<control id="configuration" />
				</field>
			</fields>
		</transition>
		<transition id="addThumbnail" group="add" />	
		<transition id="addWatchers" label="addWatchers.label" tooltip="addWatchers.tooltip" purpose="addRelation" group="add" >
			<fields>
				<field name="addAttachmentConfig" type="json">
					<value>						
						{
							"predefinedTypes" : ["emf:User"],
							"selection" : "multiple",
							"relation" : ["emf:hasWatcher"],
							"restrictions" : {"field": "emf:status", "operator": "in", "type": "codeList", "value": ["ACTIVE"]}
						}
					</value>
					<control id="configuration" />
				</field>
			</fields>
		</transition>
		
		<group id="createRevision" order="20" label="createRevision.group.label" type="menu" />
		<transition id="uploadRevision" group="createRevision" />
		<transition id="publish" tooltip="core.publish.action.tooltip" confirmation="publish.confirm" group="createRevision" >
			<fields>
				<field name="sendMail" type="an..200" displayType="system">
					<value>
						<![CDATA[
							var title = root.get('title');
							var subject = '(Published) ' + title;
							//extract warchers and crearedBy users
							var watchers = root.get('hasWatcher');
							var createdBy = root.get('createdBy');
							var recipients = [];
							var i = 0;
							if (watchers != null){
								for(i = 0; i < watchers.length; i++) {
									recipients[i] = watchers[i].toString();
								}
							}
							recipients.push(createdBy.toString());
							
							var targetID = root.get('lastPublishedRevision');
							context.put('archivedInstance', instance.load(targetID));
							
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_publish_object_core", recipients, context);
						]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>	
		<transition id="publishAsPdf" tooltip="core.publishAsPdf.action.tooltip" confirmation="publishAsPdf.confirm" group="createRevision" >
			<fields>
				<field name="sendMail" type="an..200" displayType="system">
					<value>
						<![CDATA[	
							var title = root.get('title');
							var subject = '(Published) ' + title;
							//extract warchers and crearedBy users
							var watchers = root.get('hasWatcher');
							var createdBy = root.get('createdBy');
							var recipients = [];
							var i = 0;
							if (watchers != null){
								for(i = 0; i < watchers.length; i++) {
									recipients[i] = watchers[i].toString();
								}
							}
							recipients.push(createdBy.toString());
							
							var targetID = root.get('lastPublishedRevision');
							context.put('archivedInstance', instance.load(targetID));
							
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_publish_object_core", recipients, context);
						]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>
		<transition id="editOffline" order="33" />
		<transition id="download" order="35" actionPath="/" />
				
		<group id="exportAs" order="40" label="exportAs.group.label" type="menu" />
		<transition id="exportTabPDF" group="exportAs" />
		<transition id="exportTabWord" group="exportAs" />
		
		<group id="print" order="45" label="print.group.label" type="menu" />
		<transition id="printTab" group="print" />
		
		<group id="template" order="50" label="template.group.label" type="menu" />
		<transition id="saveAsTemplate" group="template" />
		<transition id="updateTemplate" tooltip="core.updateTemplate.action.tooltip" label="updateTemplate.label" purpose="updateTemplate" confirmation="confirmation.update_template" group="template" />
		<transition id="changeTemplate" tooltip="core.changeTemplate.action.tooltip" label="changeTemplate.label" purpose="changeTemplate" group="template" />
		
		<group id="more" order="55" label="more.group.label" type="menu" />
		<transition id="changeType" group="more" >
			<fields>
				<field name="onChangeType" type="an..200" displayType="system" >
					<value>
						<![CDATA[
							var title = root.get('title');
							var subject = '(Changed type) Document: ' + title;
							
							//extract watchers
							var recipients = [];
							var watchers = root.get('hasWatcher');
							if(watchers != null){
								for(var i = 0; i < watchers.length; i++){
								recipients.push(watchers[i].toString());
								}
							}
							//extract createdBy
							recipients.push(root.get('createdBy').toString());
							
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_change_object_type_core", recipients, context, null);
						]]>
					</value>
					<control id="SCRIPT">
						<control-param id="phase" name="phase">after</control-param>
						<control-param id="async" name="async">true</control-param>
					</control>
				</field>
			</fields>
		</transition>
		<transition id="move" group="more" >
			<fields>
				<field name="sendMail" type="an..200" displayType="system" >
                    <value>
						<![CDATA[
							var title = root.get('title');
							var subject = '(Moved) ' + title;

							//extract watchers 
							var watchers = root.get('hasWatcher');
							var createdBy = root.get('createdBy');

							//add all users to recipients
							var recipients = [];
							var i = 0;
							if (watchers != null) {
							 for(i = 0; i < watchers.length; i++) {
							  	recipients.push(watchers[i].toString());
							   }
							}
							recipients.push(createdBy.toString());
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_move_object_core", recipients, context);
						]]>
                    </value>
                    <control id="SCRIPT">
                        <control-param id="phase" name="phase">after</control-param>
                        <control-param id="async" name="async">true</control-param>
                    </control>
                </field>
			</fields>
		</transition>
		<transition id="clone" group="more" />
		<transition id="lock" group="more" />
		<transition id="unlock" group="more" actionPath="/" />
		<transition id="managePermissions" group="more" />
		
		<transition id="revertVersion" order="70" tooltip="core.revertVersion.action.tooltip" confirmation="revert.confirmation" />	
		<transition id="delete" order="120" >
			<fields>
				<field name="sendMail" type="an..200" displayType="system" >
                    <value>
						<![CDATA[
							var title = root.get('title');
							var subject = '(Deleted) ' + title;

							//extract watchers and creator
							var watchers = root.get('hasWatcher');
							var createdBy = root.get('createdBy');

							//add all users to recipients
							var recipients = [];
							var i = 0;
							if (watchers != null) {
							 for(i = 0; i < watchers.length; i++) {
							  	recipients.push(watchers[i].toString());
							   }
							}
							recipients.push(createdBy.toString());
							mail.sendNotifications(root, security.getCurrentLoggedUser(), subject, "email_delete_object_core", recipients, context);
						]]>
                    </value>
                    <control id="SCRIPT">
                        <control-param id="phase" name="phase">after</control-param>
                        <control-param id="async" name="async">false</control-param>
                    </control>
                </field>
			</fields>
		</transition>
	</transitions>
		
	<stateTransitions>
		<stateTransition from="INIT" transition="create" to="DRAFT"/>
	    <stateTransition from="NOT_CREATED" transition="create" to="DRAFT"/>
		<stateTransition from="INIT" transition="clone" to="DRAFT"/>
		
		<stateTransition from="INIT" transition="changeType" to="DRAFT"/>

		<stateTransition from="DRAFT" transition="editDetails" to="DRAFT"/>	
		<stateTransition from="DRAFT" transition="uploadNewVersion" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="createWorkflow" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="addAttachment" to="DRAFT" />
		<stateTransition from="DRAFT" transition="addWatchers" to="DRAFT" />
		<stateTransition from="DRAFT" transition="addThumbnail" to="DRAFT" />
		<stateTransition from="DRAFT" transition="uploadRevision" to="COMPLETED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="DRAFT" transition="uploadRevision" to="DRAFT" />
		<stateTransition from="DRAFT" transition="publish" to="COMPLETED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="DRAFT" transition="publish" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="publishAsPdf" to="COMPLETED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="DRAFT" transition="publishAsPdf" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="editOffline" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="complete" to="COMPLETED"/>
		<stateTransition from="DRAFT" transition="download" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="exportTabPDF" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="exportTabWord" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="printTab" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="saveAsTemplate" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="updateTemplate" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="changeTemplate" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="changeType" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="move" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="clone" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="lock" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="unlock" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="managePermissions" to="DRAFT" />
		<stateTransition from="DRAFT" transition="revertVersion" to="DRAFT"/>
		<stateTransition from="DRAFT" transition="createInContext" to="DRAFT"/>	
		<stateTransition from="DRAFT" transition="delete" to="DRAFT"/>
		
		<stateTransition from="PENDING_APPROVAL" transition="editDetails" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="uploadNewVersion" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="addAttachment" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="addWatchers" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="addThumbnail" to="PENDING_APPROVAL" />
		<stateTransition from="PENDING_APPROVAL" transition="publish" to="COMPLETED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="PENDING_APPROVAL" transition="publish" to="DRAFT"/>
		<stateTransition from="PENDING_APPROVAL" transition="publishAsPdf" to="COMPLETED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="PENDING_APPROVAL" transition="publishAsPdf" to="DRAFT"/>
		<stateTransition from="PENDING_APPROVAL" transition="editOffline" to="DRAFT"/>
		<stateTransition from="PENDING_APPROVAL" transition="download" to="PENDING_APPROVAL"/>	
		<stateTransition from="PENDING_APPROVAL" transition="exportTabPDF" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="exportTabWord" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="printTab" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="saveAsTemplate" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="updateTemplate" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="lock" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="unlock" to="PENDING_APPROVAL"/>
		<stateTransition from="PENDING_APPROVAL" transition="managePermissions" to="PENDING_APPROVAL" />
		
		<stateTransition from="APPROVED" transition="publish" to="COMPLETED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="APPROVED" transition="publish" to="DRAFT" />
		<stateTransition from="APPROVED" transition="publishAsPdf" to="COMPLETED">
			<condition renderAs="PROPERTY" id="emf:revisionType">emf:revision</condition>
		</stateTransition>
		<stateTransition from="APPROVED" transition="publishAsPdf" to="DRAFT" />
		<stateTransition from="APPROVED" transition="download" to="APPROVED"/>
		<stateTransition from="APPROVED" transition="exportTabPDF" to="APPROVED"/>
		<stateTransition from="APPROVED" transition="exportTabWord" to="APPROVED"/>		
		<stateTransition from="APPROVED" transition="printTab" to="APPROVED"/>		
		<stateTransition from="APPROVED" transition="managePermissions" to="APPROVED" />
		
		<stateTransition from="OBSOLETE" transition="download" to="OBSOLETE"/>
		<stateTransition from="OBSOLETE" transition="exportTabPDF" to="OBSOLETE" />
		<stateTransition from="OBSOLETE" transition="exportTabWord" to="OBSOLETE" /> 
		<stateTransition from="OBSOLETE" transition="printTab" to="OBSOLETE" />
		<stateTransition from="OBSOLETE" transition="managePermissions" to="OBSOLETE" />
		<stateTransition from="*" transition="obsolete" to="OBSOLETE" />
		
		<stateTransition from="COMPLETED" transition="reopenDoc" to="DRAFT" />
		<stateTransition from="COMPLETED" transition="printTab" to="COMPLETED" />
        <stateTransition from="COMPLETED" transition="exportTabPDF" to="COMPLETED" />
		<stateTransition from="COMPLETED" transition="exportTabWord" to="COMPLETED" /> 
		<stateTransition from="COMPLETED" transition="download" to="COMPLETED"/>
		<stateTransition from="COMPLETED" transition="managePermissions" to="COMPLETED" />
		
	</stateTransitions>
	
	<labels>
		<label id="DOCUMENT_TOOLTIP_HEADER_CORE">
			<value lang="en"><![CDATA[${eval(
                <span class="thumbnail-content">
                    <img class="thumbnail" src="${thumbnailUri(64)}" />
                </span>
                <span class="tooltip-data">
                    <span class="tooltip-header">
                        <a href="${link(currentInstance)}" class="instance-link" data-mimetype="${get([mimetype])}" data-status="${get([status])}" data-id="${id}" data-uid="${id.uid}">
                            <span data-title="title">${get([title])}</span>
                        </a>
                    </span>
					<span class="tooltip-row">
                        <label>Type: </label>
                        <span data-property="type">${CL([type])}</span>
                    </span>
					<span class="tooltip-row">
						<label>Author: </label>
						<span data-property="chc:hasAuthor">${objectProperty(${get([chc:hasAuthor])})}</span>
					</span>
					${if(${get([departmentName])} <> null).then(
						<span class="tooltip-row">
							<label>Department: </label>
							<span data-property="departmentName">${get([departmentName])}</span>
						</span>
					)}
					${if(${get([description])} <> null).then(
						<span class="tooltip-row">
							<label>Description: </label>
							<span data-property="description">${get([description])}</span>
						</span>
					)}
					${if(${get([chcart:dateCompleted])} <> null).then(
						<span class="tooltip-row">
							<label>Date completed: </label>
							<span data-property="chcart:dateCompleted">${date([chcart:dateCompleted])}</span>
						</span>
					)}
					${if(${get([emf:purpose])} <> null).then(
						<span class="tooltip-row">
							<label>Purpose: </label>
							<span data-property="emf:purpose">${CL([emf:purpose])}</span>
						</span>
					)}
					${if(${get([chc:treatedObjects])} <> null).then(
						<span class="tooltip-row">
							<label>Single/ Multiple: </label>
							<span data-property="chc:treatedObjects">${CL([chc:treatedObjects])}</span>
						</span>
					)}
					${if(${get([chc:treatmentType])} <> null).then(
						<span class="tooltip-row">
							<label>Minor/ Major treatment: </label>
							<span data-property="chc:treatmentType">${CL([chc:treatmentType])}</span>
						</span>
					)}
					${if(${get([chc:documents])} <> null).then(
						<span class="tooltip-row">
							<label>Related Cultural Object(s): </label>
							<span data-property="chc:documents">${objectProperty(${get([chc:documents])})}</span>
						</span>
					)}
					${if(${get([chc:overallConditionAppraisal])} <> null).then(
						<span class="tooltip-row">
							<label>Overall condition appraisal: </label>
							<span data-property="chc:overallConditionAppraisal">${CL([chc:overallConditionAppraisal])}</span>
						</span>
					)}
                    <span class="tooltip-row">
                        <label>System modified by: </label>
                        <span data-property="modifiedBy">${objectProperty(${get([modifiedBy])})}</span>
                    </span>
                    <span class="tooltip-row">
                        <label>System modified on: </label>
                        <span data-property="modifiedOn">${date([modifiedOn])}</span>
                    </span>
					${if(${get([lockedBy])} <> null).then(
						<span class="tooltip-row">
							<label>${label(lockedBy)}:</label>
							<span data-property="lockedBy">${objectProperty(${get([lockedBy])})}</span>                      
						</span>
					)}	
                </span>
            )}]]></value>
		</label>	
		<label id="DOCUMENT_DEFAULT_HEADER_CORE">
			<value lang="en"><![CDATA[${eval(
				${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")}}
				${var.contentSize=${if(${get([size], 0)} <> 0).then(${get([size])}).else(${get([fileSize])})}}
				${var.isVersion= ${if(${get([isVersion])} == true).then(true).else(false)}}
				${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
				${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
				<span><img src="${thumbnailUri(64)}"/></span>
				<span>
					<span>
						${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
						<span data-property="type">${CL([type])}</span>
						${if(${get([emf:purpose])} <> null).then(&nbsp;-&nbsp;<span data-property="emf:purpose">${CL([emf:purpose])}</span>)}
						${if(${get([chc:treatedObjects])} <> null).then(&nbsp;-&nbsp;<span data-property="chc:treatedObjects">${CL([chc:treatedObjects])}</span>)}
						${if(${get([chc:treatmentType])} <> null).then(&nbsp;-&nbsp;<span data-property="chc:treatmentType">${CL([chc:treatmentType])}</span>)}
						&nbsp;(<span data-property="status">${CL([status])}</span>)
					</span>
					<br />
					<b>
						<a ${var.href} class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}">
							${if(${get([emf:isDeleted])} == true).then(<span>(Deleted)</span>)}
							${if(${or(${var.isLatest} or ${var.isRevision})}).then(
								<span>(</span>Published revision:<span data-property="revisionNumber">${get([emf:revisionNumber])}</span>)&nbsp;
							)}
							<span data-property="title">${get([title])}</span>
						</a>
					</b>	
					${if(${get([mimetype])}<>null).then(&nbsp;Mimetype: <span data-property="mimetype">${CL([mimetype])}</span>)}
					${if(${get([size])}<>null).then(,&nbsp;Size: <span data-property="size">${getReadableFormat(${var.contentSize})}</span>)}
					${if(${var.isVersion}).then(
						&nbsp;<span data-property="emf:version" class="object-version version badge">${get([emf:version])}</span>
					)}
					${if(${get([isRevisionOf])}<>null).then(<br />Revision of:<span data-property="isRevisionOf">${objectProperty(${get([isRevisionOf])})}</span>)}
				</span>)}]]>
			</value>
		</label>
        <label id="DOCUMENT_COMPACT_HEADER_CORE">
			<value lang="en"><![CDATA[${eval(
				${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")}}
				${var.isVersion= ${if(${get([isVersion])} == true).then(true).else(false)}}
				${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
				${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
				<span><img src="${thumbnailUri(16)}"/></span>
				<span>
					${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
					<a ${var.href} class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" style="vertical-align:baseline;">
						${if(${get([emf:isDeleted])} == true).then(<span>(Deleted)</span>&nbsp;)}
						${if(${or(${var.isLatest} or ${var.isRevision})}).then(
							<span data-property="revisionNumber">(Published revision:${get([emf:revisionNumber])})</span>&nbsp;
						)}
						${if(${get([mimetype])} == null).then(<span data-property="title">${get([title])}</span>).else(${if(${get([name])} <> ${get([title])}).then(<span data-property="title">${get([title])}</span>&nbsp;<span>/</span>&nbsp;<span data-property="name">${get([name])}).else(<span data-property="title">${get([title])}</span>)})}
					</a>&nbsp;
					(<span data-property="status">${CL([status])}</span>)
					${if(${var.isVersion}).then(
						&nbsp;<span data-property="emf:version" class="object-version version badge">${get([emf:version])}</span>
					)}
				</span>)}]]>
			</value>
		</label>	
		<label id="DOCUMENT_BREADCRUMB_HEADER_CORE">
            <value lang="en"><![CDATA[${eval(
				${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
				${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
				${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
				<span><img src="${thumbnailUri(16)}"/></span>
				<span>
					${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>&nbsp;)}
					<a ${var.href} class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" style="vertical-align:baseline;">
						${if(${get([emf:isDeleted])} == true).then(<span>(Deleted)</span>&nbsp;)}
						${if(${or(${var.isLatest} or ${var.isRevision})}).then(
							<span data-property="revisionNumber">(Published revision:${get([emf:revisionNumber])})</span>&nbsp;
						)}
						${if(${get([mimetype])} == null).then(<span data-property="title">${get([title])}</span>).else(${if(${get([name])} <> ${get([title])}).then(<span data-property="title">${get([title])}</span>&nbsp;<span>/</span>&nbsp;<span data-property="name">${get([name])}).else(<span data-property="title">${get([title])}</span>)})}	
					</a>
				</span>)}]]>
			</value>
		</label>
	</labels>
</definition>
