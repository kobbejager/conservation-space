package com.sirmaenterprise.sep.bpm.camunda.transitions.model;

import static com.sirma.itt.seip.rest.utils.request.params.RequestParams.KEY_ID;
import static com.sirma.itt.seip.rest.utils.request.params.RequestParams.QUERY_OPERATION;

import java.util.Collection;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.BeanParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;

import com.sirma.itt.seip.definition.DefinitionService;
import com.sirma.itt.seip.definition.rest.DefinitionModelObject;
import com.sirma.itt.seip.domain.definition.DefinitionModel;
import com.sirma.itt.seip.domain.instance.Instance;
import com.sirma.itt.seip.instance.InstanceTypeResolver;
import com.sirma.itt.seip.rest.exceptions.BadRequestException;
import com.sirma.itt.seip.rest.utils.Versions;
import com.sirma.itt.seip.rest.utils.request.RequestInfo;
import com.sirmaenterprise.sep.bpm.camunda.exception.CamundaIntegrationException;
import com.sirmaenterprise.sep.bpm.exception.BPMException;
import com.sirmaenterprise.sep.bpm.exception.BPMRuntimeException;

/**
 * Definition model provider for BPM activity instances. In addition to the default model for the requested instance
 * also is provided a set of additional activities that would be generated by the BPM engine during a transition (the
 * operation) - {@link TransitionModelService#generateTransitionActivities(Instance, String)}. Each activity (future or
 * the requested) is wrapped in {@link BPMDefinitionModelObject}
 *
 * @author simeon iliev
 * @author bbanchev
 */
@Path("/instances")
@Produces(Versions.V2_JSON)
@Consumes(Versions.V2_JSON)
@ApplicationScoped
public class BPMTransitionDefinitionModelRestService {

	@Inject
	private DefinitionService definitionService;

	@Inject
	private InstanceTypeResolver instanceTypeResolver;

	@Inject
	private TransitionModelService transitionModelService;

	/**
	 * Retrieves all the relevant models for BPM transitions.
	 *
	 * @param id
	 *            the id of the instance that is part o a workflow and want to follow up on
	 * @param request
	 *            the request payload
	 * @throws BPMException
	 *             on any error during model processing
	 * @return the model for the next task if there are any otherwise return empty map.
	 */
	@GET
	@Path("{id}/model/bpm")
	public Map<String, BPMDefinitionModelObject> getInstanceDefinitionModelBPM(@PathParam(KEY_ID) String id,
			@BeanParam RequestInfo request) throws BPMException {
		Collection<String> ids = Collections.singletonList(id);
		String operation = QUERY_OPERATION.get(request);
		return getInstancesDefinitionsModelsInternal(ids, operation);
	}

	private Map<String, BPMDefinitionModelObject> getInstancesDefinitionsModelsInternal(Collection<String> ids,
			String operation) throws CamundaIntegrationException {
		if (ids.isEmpty()) {
			throw new BadRequestException("There are no instance ids in the request or the request key is wrong.");
		}
		try {
			Collection<Instance> instances = instanceTypeResolver.resolveInstances(ids);
			Map<String, BPMDefinitionModelObject> result = new LinkedHashMap<>(instances.size() * 2);
			for (Instance instance : instances) {
				List<Instance> generateTransitionActivities = transitionModelService
						.generateTransitionActivities(instance, operation);
				for (Instance nextActivity : generateTransitionActivities) {
					DefinitionModelObject definitionModelObject = buildDefinitionModelObject(operation, nextActivity,
							definitionService.getInstanceDefinition(nextActivity));
					result.put((String) nextActivity.getId(), new BPMDefinitionModelObject(definitionModelObject));
				}
			}
			return result;
		} catch (BPMException | BPMRuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new CamundaIntegrationException("Failed to execute a request for bpm transition model!", e);
		}
	}

	private static DefinitionModelObject buildDefinitionModelObject(String operation, Instance instance,
			DefinitionModel model) {
		DefinitionModelObject object = new DefinitionModelObject();
		object.setOperation(operation);
		object.setInstance(instance);
		object.setDefinitionModel(model);
		return object;
	}
}
