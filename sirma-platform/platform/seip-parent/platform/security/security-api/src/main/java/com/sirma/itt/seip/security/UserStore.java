package com.sirma.itt.seip.security;

import static com.sirma.itt.seip.util.EqualsHelper.getOrDefault;

import java.io.Serializable;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.Map;

/**
 * Interface to provide means for the module to retrieve user instances without the need of concrete implementation.
 *
 * @author BBonev
 */
public interface UserStore {

	/**
	 * Load user by system id.
	 *
	 * @param systemId
	 *            the system id
	 * @return the user
	 */
	User loadBySystemId(Serializable systemId);

	/**
	 * Load user by identity id in the current tenant context.
	 *
	 * @param identity
	 *            the identity
	 * @return the user
	 */
	User loadByIdentityId(String identity);

	/**
	 * Load user by identity id in the specified tenant.
	 *
	 * @param identity
	 *            the identity
	 * @param tenantId
	 *            the tenant id
	 * @return the user
	 */
	User loadByIdentityId(String identity, String tenantId);

	/**
	 * Sets the user ticket.
	 *
	 * @param user
	 *            the user. <strong> If user does not support setup of token request is skipped</strong>
	 * @param ticket
	 *            the ticket
	 * @return the user
	 */
	User setUserTicket(User user, String ticket);

	/**
	 * Notifies that the given user has the given request properties. This method should be called for each
	 * authenticated user for each request once per request. It can be used to copy information from the request to the
	 * authenticated user.
	 *
	 * @param user
	 *            the authenticated user
	 * @param info
	 *            the request info provided that is received with the request such as language and HTTP headers for
	 *            examples
	 */
	void setRequestProperties(User user, RequestInfo info);

	/**
	 * Wraps the given user with application specific implementation. To extract the wrapped value the
	 * {@link #unwrap(User)} method will be called.
	 * <p>
	 * This method is called for objects that are generated by the security module but to be compatible with the
	 * specific application that may need wrapping into application specific implementation.
	 * <p>
	 * Note that the value here should be the same returned by the method {@link #unwrap(User)}
	 *
	 * @param user
	 *            the user to wrap
	 * @return the wrapped user or the same instance if no wrapping is needed
	 */
	default User wrap(User user) {
		return user;
	}

	/**
	 * Unwraps a wrapped user instance if any. This method will be called before security module perform any specific
	 * operations on the passed user if needed.
	 *
	 * @param user
	 *            the user
	 * @return the unwrapped instance or the same as the argument if nothing to unwrap.
	 */
	default User unwrap(User user) {
		return user;
	}

	/**
	 * Represents a request information that can be passed to the
	 * {@link UserStore#setRequestProperties(User, RequestInfo)}. The implementation should carry information that is
	 * available for the current request as preferred language or other information (HTTP request headers for example)
	 *
	 * @author BBonev
	 */
	interface RequestInfo {

		/**
		 * Create simple {@link RequestInfo} instance initialized with the given list of languages and headers
		 *
		 * @param languages
		 *            optional languages to pass
		 * @param headers
		 *            optional headers to pass
		 * @return immutable request info that will provide the given arguments.
		 */
		static RequestInfo create(List<Locale> languages, Map<String, List<String>> headers) {
			return new SimpleRequestInfo(languages, headers);
		}
		/**
		 * Get a list of languages that are acceptable for the response.
		 *
		 * @return a read-only list of acceptable languages sorted according to their q-value, with highest preference
		 *         first.
		 */
		List<Locale> getAcceptableLanguages();

		/**
		 * Get the immutable request headers multivalued map.
		 *
		 * @return mutable multivalued map of request headers.
		 */
		Map<String, List<String>> getHeaders();
	}

	/**
	 * Simple immutable implementation of {@link RequestInfo}
	 *
	 * @author BBonev
	 */
	static final class SimpleRequestInfo implements RequestInfo {

		private final List<Locale> languages;
		private final Map<String, List<String>> headers;

		SimpleRequestInfo(List<Locale> languages, Map<String, List<String>> headers) {
			this.languages = Collections.unmodifiableList(getOrDefault(languages, Collections.emptyList()));
			this.headers = Collections.unmodifiableMap(getOrDefault(headers, Collections.emptyMap()));
		}

		@Override
		public List<Locale> getAcceptableLanguages() {
			return languages;
		}

		@Override
		public Map<String, List<String>> getHeaders() {
			return headers;
		}

	}
}
