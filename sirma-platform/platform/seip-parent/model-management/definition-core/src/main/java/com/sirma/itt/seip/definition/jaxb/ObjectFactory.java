//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, v2.2.5-2
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2012.11.05 at 02:34:28 PM EET
//

package com.sirma.itt.seip.definition.jaxb;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each Java content interface and Java element interface generated in the
 * com.sirma.itt.cmf.beans.jaxb package.
 * <p>
 * An ObjectFactory allows you to programatically construct new instances of the Java representation for XML content.
 * The Java representation of XML content can consist of schema derived interfaces and classes representing the binding
 * of schema type definitions, element declarations and model groups. Factory methods for each of these are provided in
 * this class.
 */
@XmlRegistry
public class ObjectFactory {

	/**
	 * Create an instance of {@link Labels }.
	 *
	 * @return the labels
	 */
	public Labels createLabels() {
		return new Labels();
	}

	/**
	 * Create an instance of {@link Label }.
	 *
	 * @return the label
	 */
	public Label createLabel() {
		return new Label();
	}

	/**
	 * Create an instance of {@link FilterDefinitions }.
	 *
	 * @return the filter definitions
	 */
	public FilterDefinitions createFilterDefinitions() {
		return new FilterDefinitions();
	}

	/**
	 * Create an instance of {@link FilterDefinition }.
	 *
	 * @return the filter definition
	 */
	public FilterDefinition createFilterDefinition() {
		return new FilterDefinition();
	}

	/**
	 * Create an instance of {@link ComplexFieldsDefinition }.
	 *
	 * @return the complex fields definition
	 */
	public ComplexFieldsDefinition createComplexFieldsDefinition() {
		return new ComplexFieldsDefinition();
	}

	/**
	 * Create an instance of {@link ComplexFieldDefinition }.
	 *
	 * @return the complex field definition
	 */
	public ComplexFieldDefinition createComplexFieldDefinition() {
		return new ComplexFieldDefinition();
	}

	/**
	 * Create an instance of {@link ConditionDefinition }.
	 *
	 * @return the condition definition
	 */
	public ConditionDefinition createConditionDefinition() {
		return new ConditionDefinition();
	}

	/**
	 * Create an instance of {@link TransitionDefinition }.
	 *
	 * @return the transition definition
	 */
	public TransitionDefinition createTransitionDefinition() {
		return new TransitionDefinition();
	}

	/**
	 * Create an instance of {@link RegionDefinition }.
	 *
	 * @return the region definition
	 */
	public RegionDefinition createRegionDefinition() {
		return new RegionDefinition();
	}

	/**
	 * Create an instance of {@link LabelValue }.
	 *
	 * @return the label value
	 */
	public LabelValue createLabelValue() {
		return new LabelValue();
	}

	/**
	 * Create an instance of {@link ControlParam }.
	 *
	 * @return the control param
	 */
	public ControlParam createControlParam() {
		return new ControlParam();
	}

	/**
	 * Create an instance of {@link UiParam }.
	 *
	 * @return the ui param
	 */
	public UiParam createUiParam() {
		return new UiParam();
	}

	/**
	 * Create an instance of {@link ControlDefinition }.
	 *
	 * @return the control definition
	 */
	public ControlDefinition createControlDefinition() {
		return new ControlDefinition();
	}

	/**
	 * Create an instance of {@link TransitionsDefinition }.
	 *
	 * @return the transitions definition
	 */
	public TransitionsDefinition createTransitionsDefinition() {
		return new TransitionsDefinition();
	}

	/**
	 * Create an instance of {@link RegionsDefinition }.
	 *
	 * @return the regions definition
	 */
	public RegionsDefinition createRegionsDefinition() {
		return new RegionsDefinition();
	}

	/**
	 * Create an instance of {@link AllowedChildrenType }.
	 *
	 * @return the allowed children type
	 */
	public AllowedChildrenType createAllowedChildrenType() {
		return new AllowedChildrenType();
	}

	/**
	 * Create an instance of {@link ConfigType }.
	 *
	 * @return the config type
	 */
	public ConfigType createConfigType() {
		return new ConfigType();
	}

	/**
	 * Create an instance of {@link ConfigsType }.
	 *
	 * @return the configs type
	 */
	public ConfigsType createConfigsType() {
		return new ConfigsType();
	}

	/**
	 * Create an instance of {@link FilterType }.
	 *
	 * @return the filter type
	 */
	public FilterType createFilterType() {
		return new FilterType();
	}

	/**
	 * Create an instance of {@link StateTransitionsDefinition }.
	 *
	 * @return the state transitions definition
	 */
	public StateTransitionsDefinition createStateTransitionsDefinition() {
		return new StateTransitionsDefinition();
	}

	/**
	 * Create an instance of {@link StateTransitionDefinition }.
	 *
	 * @return the state transition definition
	 */
	public StateTransitionDefinition createStateTransitionDefinition() {
		return new StateTransitionDefinition();
	}

	/**
	 * Create an instance of {@link Definition }.
	 *
	 * @return the definition
	 */
	public Definition createDefinition() {
		return new Definition();
	}

	/**
	 * Create an instance of {@link SubDefinitionType }.
	 *
	 * @return the sub definition type
	 */
	public SubDefinitionType createSubDefinitionType() {
		return new SubDefinitionType();
	}

}
