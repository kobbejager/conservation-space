/**
 *
 */
package com.sirma.itt.seip.adapters.remote;

import java.io.InputStream;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;

import org.apache.commons.httpclient.HttpMethod;
import org.apache.commons.httpclient.URI;
import org.apache.commons.httpclient.URIException;
import org.apache.commons.httpclient.methods.multipart.Part;

/**
 * The Interface RESTClient is base interface to execute scripts on DMS system.
 *
 * @author borislav banchev
 */
public interface RESTClient extends Serializable {

	/**
	 * Call web script.
	 *
	 * @param uri
	 *            the uri of the service as '/api/node/...'
	 * @param method
	 *            the method is some method like
	 * @return the string returns the respone on code 200
	 * @throws DMSClientException
	 *             the dMS client exception {@link org.apache.commons.httpclient.methods.GetMethod}
	 */
	String request(String uri, HttpMethod method) throws DMSClientException;

	/**
	 * Call web script and gets the stream back.
	 *
	 * @param uri
	 *            the uri of the service as '/api/node/...'
	 * @param method
	 *            the method is some method like
	 * @return the string returns the respone on code 200
	 * @throws DMSClientException
	 *             the dMS client exception {@link org.apache.commons.httpclient.methods.GetMethod}
	 */
	InputStream request(HttpMethod method, String uri) throws DMSClientException;

	/**
	 * Call uri and returns the method provided, with populated response data
	 *
	 * @param uri
	 *            the uri of the service as '/api/node/...'
	 * @param method
	 *            the method is some method like {@link org.apache.commons.httpclient.methods.GetMethod} generated by
	 *            {@link #createMethod(HttpMethod, Part[], boolean)} or
	 *            {@link #createMethod(HttpMethod, String, boolean)}
	 * @return the updated from response method or null on any error
	 * @throws DMSClientException
	 *             the dMS client exception {@link org.apache.commons.httpclient.methods.GetMethod}
	 */
	HttpMethod rawRequest(HttpMethod method, String uri) throws DMSClientException;

	/**
	 * Call uri and returns the method provided, with populated response data.
	 *
	 * @param uri
	 *            the uri of the service as object
	 * @param method
	 *            the method is some method like {@link org.apache.commons.httpclient.methods.GetMethod}
	 * @return the updated from response method or null on any error
	 * @throws DMSClientException
	 *             the dMS client exception {@link org.apache.commons.httpclient.methods.GetMethod}
	 */
	HttpMethod rawRequest(HttpMethod method, URI uri) throws DMSClientException;

	/**
	 * Updates http method that is provided to be ready for execution
	 *
	 * @param method
	 *            the method is the method to update
	 * @param parts
	 *            the parts are the parts to enrich
	 * @param authentication
	 *            the authentication whether to use auth
	 * @return the http method
	 */
	HttpMethod createMethod(HttpMethod method, Part[] parts, boolean authentication);

	/**
	 * Updates http method that is provided to be ready for execution
	 *
	 * @param method
	 *            the method is the method to update
	 * @param content
	 *            the content to update
	 * @param authentication
	 *            the authentication whether to use auth
	 * @return the http method enriched with dependint on the content
	 * @throws UnsupportedEncodingException
	 *             the unsupported encoding exception
	 */
	HttpMethod createMethod(HttpMethod method, String content, boolean authentication)
			throws UnsupportedEncodingException;

	/**
	 * Constructs and URI to the given relative url. Service should be initialized in prior with correct remote host and
	 * port.
	 *
	 * @param relativeURL
	 *            is the uri of rest service on the remote machine
	 * @throws URIException
	 *             on uri set error
	 * @return the uri builded ( full including protocol, host, port and service)
	 */
	URI buildFullURL(final String relativeURL) throws URIException;
}
