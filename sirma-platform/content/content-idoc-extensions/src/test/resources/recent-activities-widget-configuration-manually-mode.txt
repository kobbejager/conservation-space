{  
    "expanded":true,
    "selection":"multiple",
    "selectObjectMode":"manually",
    "showIncludeCurrent":true,
    "pageSize":"10",
    "triggerSearch":false,
    "includeCurrent":false,
    "selectedItems":[  
        {"id":"emf:707e53c8-340d-4f40-ae51-21b7f19b3cdc" },
        {"id":"emf:1cfbc06d-78cc-4e89-9141-96cf1c79a87a" },
        {"id":"emf:Image"},
        {"id":"emf:5b22f3f8-b74c-4bf2-a882-0690045b211c"}],
    "criteria":{  
        "condition":"OR",
        "rules":[  
            {  
                "id":"33350fe5-8209-4be1-e667-66690a3024de",
                "condition":"AND",
                "rules":[  
                    {  
                        "id":"8c1e031c-123f-42c7-8ecc-524760300a86",
                        "field":"types",
                        "type":"",
                        "operator":"equals",
                        "value":[  
                            "anyObject"
                        ]
                    },
                    {  
                        "id":"1cfd78db-ba44-4780-f928-69e14f7af8f4",
                        "condition":"AND",
                        "rules":[  

                        ]
                    }
                ]
            }
        ],
        "id":"aa98c7e6-db59-400d-87dd-7ec7ad2ebcf9"
    },
    "renderOptions":true,
    "renderCriteria":true,
    "renderToolbar":true,
    "renderPagination":true,
    "exclusions":[  

    ],
    "searchMode":"basic"
}